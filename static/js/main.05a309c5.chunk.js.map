{"version":3,"sources":["component/messages.tsx","component/edge.tsx","three-utils/text.tsx","component/node.tsx","three-utils/use-spring-3d.ts","three-utils/camera-rig.tsx","graph/use-graph-viewport.ts","graph/graph.tsx","demo-graph.tsx","graph/nlayout-graph.ts","component/record-stream.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EdgeMessages","prefix","curve","elapsed","messages","duration","messageMeshes","useMemo","map","message","key","messageKey","position","getPointAt","Math","max","min","frame","color","messageMesh","i","attach","args","Edge","fromNode","toNode","points","onEgress","_onEgress","useCallback","useState","elapsedMs","setElapsedMs","useFrame","clock","elapsedTime","messagesBuffered","messagePump","undefined","setMessages","useEffect","length","msg","unexpiredMessages","m","filter","expiredMessages","emptyArray","keyed","keyBy","useTrackMessages","CatmullRomCurve3","usePath","stepFunction","v","neg","abs","generateTopUV","geometry","vertices","indexA","indexB","indexC","rear","a_x","a_y","b_x","b_y","c_x","c_y","Vector2","generateSideWallUV","indexD","depth","options","curves","shapes","mX","reduce","p","c","v1","x","v2","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","mY","y","mZ","ofMax","a_z","b_z","c_z","d_y","d_z","right","Text","forwardRef","ref","width","height","text","backgroundColor","onClick","props","_width","_height","_text","shape","__shape","Shape","moveTo","lineTo","extrudeSettings","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","UVGenerator","textCanvas","canvas","document","createElement","context","getContext","textureWidth","textureHeight","style","top","scale","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","fillText","_onClick","roughness","metalness","attachArray","image","defaultProps","Label","name","onSelect","useRef","_onSelect","current","mesh","pos","Vector3","z","Edges","edges","edge","Node","edgeProps","useEdges","setElpased","floor","useCheckMessages","useVel","initial","target","damper","spring","vel","state","set","onFrame","Controls","controls","useThree","gl","camera","update","domElement","enableDamping","dampingFactor","rotateSpeed","extend","OrbitControls","CameraRig","targetPosition","distance","orbit","rotate","t","getElapsedTime","PI","cos","sin","camPosS","camPos","camLookAt","lookAt","useCameraPan","scaleToFit3","midGraph","scaleFactor","scalePoint","graph","viewportWidth","viewportHeight","useScaleFactor","viewport","maxGraph","Graph","onSelectNode","selectedNode","feed","messageState","setMessageState","f","to","count","scaledGraph","nodes","node","from","useGraphViewPort","edgesPerNode","groupBy","e","selectedNodeIndex","index","findIndex","DemoGraph","pumpProducer","pumpValue","setNode","selectedMesh","setMesh","createGraph","n","addNode","addLink","layout","layout3d","gravity","setNodePosition","random","step","retnodes","getNodePosition","retEdges","fromPos","toPos","getNode","data","mid","delta","connectPoint","output","midp","fromPoint","toPoint","fromHose","toHose","getGraphRect","x1","x2","y1","y2","z1","z2","useNgraph","light1","light2","light3","light4","lightHelper1","lightHelper2","lightHelper3","lightHelper4","unselect","pixelRatio","window","devicePixelRatio","onClickCapture","intensity","RecordStream","filename","downloadUrl","setDownloadUrl","recorder","setRecorder","videoRef","onsStart","a","recData","navigator","mediaDevices","getDisplayMedia","video","audio","stream","srcObject","currRec","MediaRecorder","mimeType","ondataavailable","push","onstop","blob","Blob","type","URL","createObjectURL","start","doit","onStop","stop","padding","display","href","download","commonNode","weight","buttonStyle","fontWeight","margin","App","pump","setPump","setOrbit","pump1","id","pump2","pump3","orbitChange","console","log","checked","className","onChange","data-on","data-off","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAqBaA,EAAsC,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC9EC,EAAgBC,mBAAQ,WAC1B,OAAQH,GAAY,IAAII,KAAI,SAAAC,GACxB,MAAO,CACHC,IAAKD,EAAQE,WACbC,SAAUV,EAAMW,WAAWC,KAAKC,IAAI,EAAGD,KAAKE,IAAI,GAAIb,EAAUM,EAAQQ,OAASZ,KAC/Ea,MAAiC,MAA1BT,EAAQE,WAAW,GAAa,UAAsC,MAA1BF,EAAQE,WAAW,GAAa,UAAY,gBAGxG,CAACR,EAASC,EAAUF,EAAOG,IAE9B,OACI,oCACKC,EAAcE,KAAI,SAACW,EAAaC,GAC7B,OACI,0BAAMV,IAAKT,EAASmB,EAAGR,SAAUO,EAAYP,UACzC,oCAAgBS,OAAO,WAAWC,KAAM,CAAC,QACzC,uCAAmBD,OAAO,WAAWH,MAAOC,EAAYD,cCiCzE,IAAMK,EAAsB,SAAC,GAAyE,IAAvEC,EAAsE,EAAtEA,SAAUC,EAA4D,EAA5DA,OAAQrB,EAAoD,EAApDA,SAAUsB,EAA0C,EAA1CA,OAAQrB,EAAkC,EAAlCA,SAAUF,EAAwB,EAAxBA,QAASwB,EAAe,EAAfA,SACnFC,EAAYC,uBAAY,SAACzB,GAAD,OAAgCuB,EAASH,EAAUC,EAAQrB,KAAW,CAChGoB,EACAC,EACAE,IAJoG,EAMtEG,mBAAS,GAN6D,mBAMjGC,EANiG,KAMtFC,EANsF,KAOxGC,aAAS,YAAgB,IAAbC,EAAY,EAAZA,MACRF,EAAaE,EAAMC,gBAGvB,IAAMC,EArEV,SACIC,EACAhC,EACA8B,EACAR,GACD,IAAD,EACkCG,wBAAuCQ,GADzE,mBACSlC,EADT,KACmBmC,EADnB,KAEEC,qBAAU,WACDH,GAAsC,IAAvBA,EAAYI,QAEhCF,GAAY,SAAAG,GAAG,4BAASA,GAAO,IAAhB,YAAwBL,SACxC,CAACA,EAAahC,IACjB,IAAMsC,EAAoBpC,mBAA0B,WAChD,IAAKH,GAAgC,IAApBA,EAASqC,OAAc,MAAO,GAC/C,IAAMG,EAAIxC,EAAS,GACnB,OAAI+B,GAAeS,EAAE3B,MAAQZ,EAClBD,EAASyC,QAAO,SAAAD,GAAC,OAAIT,EAAcS,EAAE3B,MAAQZ,KAE7CD,IAEZ,CAACA,EAAUC,EAAU8B,IAElBW,EAAkBvC,mBAAQ,WAC5B,IAAMwC,EAA+B,GACrC,IAAK3C,GAAgC,IAApBA,EAASqC,OACtB,OAAOM,EAEX,IAAMH,EAAIxC,EAAS,GACnB,OAAI+B,GAAeS,EAAE3B,MAAQZ,EAElBD,EAASyC,QAAO,SAAAD,GAAC,OAAIT,GAAeS,EAAE3B,MAAQZ,KAC3C0C,IACf,CAAC3C,EAAUC,EAAU8B,IAcxB,OAZAK,qBAAU,WACN,GAAKM,GAA8C,IAA3BA,EAAgBL,OAAxC,CACA,IAAMO,EAAQC,gBAAMH,GAAiB,SAAAF,GAAC,OAAIA,EAAEjC,cAC5C4B,GAAY,SAAAG,GAAG,OAAKA,GAAO,IAAIG,QAAO,SAAAD,GAAC,OAAKI,EAAMJ,EAAEjC,qBACrD,CAACmC,IAEJN,qBAAU,WAEDM,GAA8C,IAA3BA,EAAgBL,QAExCd,EAASmB,KACV,CAACzC,EAAUyC,EAAiBnB,IACxBgB,EAuBkBO,CAAiB9C,EAAUC,EAAUF,EAASyB,GACjE1B,EA5EH,SAAiBwB,GACpB,OAAOnB,mBAAQ,WACX,OAAO,IAAI4C,mBAAiBzB,GAAQ,EAAO,gBAC5C,CAACA,IAyEU0B,CAAQ1B,GACtB,OACI,oCACI,0BAAMhB,IAAG,UAAKc,EAAL,YAAiBC,EAAjB,UACL,kCAAcJ,OAAO,WAAWC,KAAM,CAACpB,EAAO,GAAI,IAAM,GAAG,KAC3D,uCAAmBmB,OAAO,WAAWH,MAAM,UAE/C,kBAAC,EAAD,CACIR,IAAG,UAAKc,EAAL,YAAiBC,EAAjB,aACHtB,QAAS4B,EACT9B,OAAM,UAAKuB,EAAL,YAAiBC,EAAjB,aACNvB,MAAOA,EACPG,SAAUA,EACVD,SAAUgC,M,QChFpBiB,EAAe,SAACC,GAAD,IAAYC,EAAZ,+DAA6BA,EAAM,GAAKD,EAAIxC,KAAK0C,IAAIF,GAAK,GAAK,GAAKA,EAAIxC,KAAK0C,IAAIF,GAAK,GAAK,GAE1GG,EAAgB,SAClBC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAOJ,EAAkB,EAATC,EAAa,GAAK,EACpCI,EAAMX,EAAaM,EAAkB,EAATC,GAAaG,GACzCE,EAAMZ,EAAaM,EAAkB,EAATC,EAAa,IAAI,GAC7CM,EAAMb,EAAaM,EAAkB,EAATE,GAAaE,GACzCI,EAAMd,EAAaM,EAAkB,EAATE,EAAa,IAAI,GAC7CO,EAAMf,EAAaM,EAAkB,EAATG,GAAaC,GACzCM,EAAMhB,EAAaM,EAAkB,EAATG,EAAa,IAAI,GACjD,MAAO,CAAC,IAAIQ,UAAQN,EAAKC,GAAM,IAAIK,UAAQJ,EAAKC,GAAM,IAAIG,UAAQF,EAAKC,KAGrEE,EAAqB,SACvBb,EACAC,EACAC,EACAC,EACAC,EACAU,GAEA,IAAMC,EAASf,EAAD,WAAgCgB,QAAQD,MAChDE,EAAUjB,EAAD,WAAgCkB,OAAOD,OAChDE,EAAKF,EAAOG,QACd,SAACC,EAAGC,GAAJ,MAAU,CAAClE,KAAKE,IAAI+D,EAAE,GAAIC,EAAEC,GAAGC,EAAGF,EAAEG,GAAGD,GAAIpE,KAAKC,IAAIgE,EAAE,GAAIC,EAAEC,GAAGC,EAAGF,EAAEG,GAAGD,MACvE,CAACE,OAAOC,iBAAkBD,OAAOE,mBAE/BC,EAAKZ,EAAOG,QACd,SAACC,EAAGC,GAAJ,MAAU,CAAClE,KAAKE,IAAI+D,EAAE,GAAIC,EAAEC,GAAGO,EAAGR,EAAEG,GAAGK,GAAI1E,KAAKC,IAAIgE,EAAE,GAAIC,EAAEC,GAAGO,EAAGR,EAAEG,GAAGK,MACvE,CAACJ,OAAOC,iBAAkBD,OAAOE,mBAE/BG,EAAK,CAAC,EAAGhB,GACTiB,EAAQ,SAACpC,EAAWvC,GAAZ,OAAuCuC,EAAIvC,EAAI,KAAOA,EAAI,GAAKA,EAAI,KAC7EiD,EAAM0B,EAAM/B,EAAkB,EAATC,GAAaiB,GAClCZ,EAAMyB,EAAM/B,EAAkB,EAATC,EAAa,GAAI2B,GACtCI,EAAMD,EAAM/B,EAAkB,EAATC,EAAa,GAAI6B,GACtCvB,EAAMwB,EAAM/B,EAAkB,EAATE,GAAagB,GAClCV,EAAMuB,EAAM/B,EAAkB,EAATE,EAAa,GAAI0B,GACtCK,EAAMF,EAAM/B,EAAkB,EAATE,EAAa,GAAI4B,GAEtCpB,GADMqB,EAAM/B,EAAkB,EAATG,GAAae,GAC5Ba,EAAM/B,EAAkB,EAATG,EAAa,GAAIyB,IACtCM,EAAMH,EAAM/B,EAAkB,EAATG,EAAa,GAAI2B,GAEtCK,GADMJ,EAAM/B,EAAkB,EAATa,GAAaK,GAC5Ba,EAAM/B,EAAkB,EAATa,EAAa,GAAIe,IACtCQ,EAAML,EAAM/B,EAAkB,EAATa,EAAa,GAAIiB,GAG1C,GAAI3E,KAAK0C,IAAIQ,EAAME,GAAO,IAAM,CAC5B,IAAM8B,EAAQ,SAACd,GAAD,OAAgBlB,EAAM,GAAM,EAAIkB,EAAIA,GAClD,MAAO,CACH,IAAIZ,UAAQ0B,EAAML,GAAM1B,GACxB,IAAIK,UAAQ0B,EAAMJ,GAAMzB,GACxB,IAAIG,UAAQ0B,EAAMH,GAAMxB,GACxB,IAAIC,UAAQ0B,EAAMD,GAAMD,IAG5B,MAAO,CAAC,IAAIxB,UAAQ,EAAG,GAAI,IAAIA,UAAQ,EAAG,GAAI,IAAIA,UAAQ,EAAG,GAAI,IAAIA,UAAQ,EAAG,KAI3E2B,EAAOC,sBAChB,WAAiGC,GAAS,IAAvGC,EAAsG,EAAtGA,MAAOC,EAA+F,EAA/FA,OAAQC,EAAuF,EAAvFA,KAAMC,EAAiF,EAAjFA,gBAAiBrF,EAAgE,EAAhEA,MAAOuD,EAAyD,EAAzDA,MAAO+B,EAAkD,EAAlDA,QAAS5F,EAAyC,EAAzCA,SAAa6F,EAA4B,gGAC/FC,EAASN,EACTO,EAAUN,EACVO,EAAQN,EAERO,EAAQtG,mBAAQ,WAClB,IAAMuG,EAAU,IAAIC,QAMpB,OALAD,EAAQE,OAAQN,EAAS,GAAM,EAAIC,EAAU,GAAM,GACnDG,EAAQG,OAAOP,EAAS,EAAIC,EAAU,GAAM,GAC5CG,EAAQG,OAAOP,EAAS,EAAGC,EAAU,GACrCG,EAAQG,OAAQP,EAAS,GAAM,EAAGC,EAAU,GAC5CG,EAAQG,OAAQP,EAAS,GAAM,EAAIC,EAAU,GAAM,GAC5CG,IACR,CAACJ,EAAQC,IAENO,EAAkB3G,mBACpB,iBAAO,CACH4G,MAAO,EACP1C,MAAOA,EACP2C,cAAc,EACdC,eAAgB,IAChBC,UAAW,IACXC,YAAa,EACbC,cAAe,EACfC,YAAa,CAAEhE,gBAAec,yBAElC,CAACE,IAGCiD,EAAanH,mBAAQ,WACvB,IAAMoH,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAClC,IAAKD,EAAS,OAAO,KACrB,IAAME,EAAwB,GAATtB,EACfuB,EAA0B,GAAVtB,EACtBgB,EAAOO,MAAMtH,SAAW,WACxB+G,EAAOO,MAAMC,IAAb,qBAAiCF,EAAgB,EAAjD,OACAN,EAAOO,MAAM9B,MAAQ4B,EAAe,KACpCL,EAAOO,MAAM7B,OAAS4B,EAAgB,KACtCN,EAAOvB,MAAuB,GAAf4B,EACfL,EAAOtB,OAAyB,GAAhB4B,EAChBH,EAAQM,MAAM,GAAI,IAClBN,EAAQO,UAAY9B,GAAmB,OAEvCuB,EAAQQ,SAAS,EAAG,EAAGN,EAAcC,GACrC,IAAMM,EAAWN,EAAgB,IACjCH,EAAQU,KAAR,eAAuBD,EAAvB,wBACAT,EAAQO,UAAYnH,GAAS,QAC7B4G,EAAQW,UAAY,SACpBX,EAAQY,aAAe,SACvB,IAAMxD,EAAI8C,EAAe,EACnBxC,EAAIyC,EAAgB,EAE1B,OADAH,EAAQa,SAAS/B,EAAO1B,EAAGM,GACpBmC,IACR,CAACjB,EAAQC,EAASzF,EAAOqF,EAAiBK,IACvCgC,EAAW/G,uBAAY,WACzB2E,EAAQ,CAAEF,WACX,CAACA,EAAME,IACV,OACI,wCAAML,IAAKA,EAAKK,QAASoC,EAAUhI,SAAUA,GAAc6F,GACvD,uCAAmBnF,KAAM,CAACoF,EAAQC,EAASlC,GAAQpD,OAAO,aAC1D,qCAAiBA,OAAO,WAAWC,KAAM,CAACuF,EAAOK,KACjD,0CAAsB2B,UAAW,GAAKC,UAAW,GAAKC,YAAY,YAC9D,mCAAe1H,OAAO,MAAM2H,MAAOtB,KAEvC,0CAAsBmB,UAAW,GAAKC,UAAW,GAAKC,YAAY,YAC9D,mCAAe1H,OAAO,MAAM2H,MAAOtB,SAOvDzB,EAAKgD,aAAe,CAAExE,MAAO,IAAM2B,MAAO,EAAGC,OAAQ,GAAKC,KAAM,UChHzD,IAAM4C,EAAwB,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,KAAMvI,EAA+C,EAA/CA,SAAUwF,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,OAAQ5B,EAAsB,EAAtBA,MAAO2E,EAAe,EAAfA,SACpEjD,EAAMkD,mBACNC,EAAYzH,uBACd,gBAAGyE,EAAH,EAAGA,KAAH,OAAgCH,EAAIoD,SAAWH,EAAS,CAAED,KAAM7C,EAAMkD,KAAMrD,EAAIoD,YAChF,CAACH,IAECK,EAAMlJ,mBAAQ,kBAAM,IAAImJ,UAAQ9I,EAASsE,EAAGtE,EAAS4E,EAAG5E,EAAS+I,EAAIlF,EAAQ,KAAI,CAAC7D,EAAU6D,IAClG,OACI,kBAACwB,EAAD,CACIvF,IAAKyI,EACLhD,IAAKA,EACLK,QAAS8C,EACThD,KAAM6C,EACNjI,MAAO,UACPkF,MAAOA,EACPC,OAAiB,IAATA,EACRE,gBAAgB,UAChB9B,MAAOA,EACP7D,SAAU6I,KAKTG,EAAoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAC7C,oCACKA,EAAMrJ,KAAI,SAAAsJ,GAAI,OACX,kBAAC,EAAD,eAAMpJ,IAAG,UAAKoJ,EAAKtI,SAAV,YAAsBsI,EAAKrI,OAA3B,UAA8CqI,SAKtDC,EAAsB,SAAC,GAAmF,IAAjFZ,EAAgF,EAAhFA,KAAMC,EAA0E,EAA1EA,SAAUhD,EAAgE,EAAhEA,MAAOC,EAAyD,EAAzDA,OAAQ5B,EAAiD,EAAjDA,MAAO7D,EAA0C,EAA1CA,SAAUR,EAAgC,EAAhCA,SAAUyJ,EAAsB,EAAtBA,MAAOlI,EAAe,EAAfA,SAE7FqI,EAiBH,SACHH,EACAV,EACA/I,EACAD,EACAwB,GAEA,OAAOpB,mBACH,kBACIsJ,EAAMrJ,KAAI,SAAAsJ,GAAI,sBACPA,EADO,CAEVzJ,SAAUyJ,EAAKzJ,SACfmB,SAAU2H,EACV/I,WACAD,UACAwB,kBAER,CAACkI,EAAOV,EAAMhJ,EAASC,EAAUuB,IAlCnBsI,CAASJ,EAAOV,EAAM/I,EAjDrC,SAA0BA,GAAsC,IAAD,EAChC0B,mBAAS,GADuB,mBAC3DK,EAD2D,KAC9C+H,EAD8C,KAKlE,OAHAjI,aAAS,YAAgB,IAAbC,EAAY,EAAZA,MACRgI,EAAWpJ,KAAKqJ,MAA0B,IAApBjI,EAAMC,aAAqB,QAE9CA,EA2CSiI,GAC2CzI,GAC3D,OACI,oCACI,kBAAC,EAAD,CACIjB,IAAI,QACJyI,KAAMA,EACNC,SAAUA,EACVhD,MAAOA,EACPC,OAAQA,EACR5B,MAAO3D,KAAK0C,IAAIiB,GAChB7D,SAAUA,IAEd,kBAAC,EAAD,CAAOiJ,MAAOG,MChFnB,SAASK,EAAOC,EAAkBC,EAAlC,GAAqG,IAAD,IAA/CC,cAA+C,MAAtC,IAAsC,MAAhCC,cAAgC,MAAvB,KAAuB,IAClF3I,mBAAS,CAAE2H,IAAK,CAAEvE,EAAGoF,EAAQpF,EAAGM,EAAG8E,EAAQ9E,EAAGmE,EAAGW,EAAQX,GAAKe,IAAK,CAAExF,EAAG,EAAGM,EAAG,EAAGmE,EAAG,KADF,mBAChGgB,EADgG,KACzFC,EADyF,KAEjGC,EAAUhJ,uBAAY,WACxB+I,GAAI,SAAAD,GAAK,MAAK,CACVD,IAAK,CACDxF,IAAKqF,EAAOrF,EAAIyF,EAAMlB,IAAIvE,GAAKuF,EAASE,EAAMD,IAAIxF,GAAKsF,EACvDhF,IAAK+E,EAAO/E,EAAImF,EAAMlB,IAAIjE,GAAKiF,EAASE,EAAMD,IAAIlF,GAAKgF,EACvDb,IAAKY,EAAOZ,EAAIgB,EAAMlB,IAAIE,GAAKc,EAASE,EAAMD,IAAIf,GAAKa,GAE3Df,IAAK,CACDvE,EAAGyF,EAAMlB,IAAIvE,EAAIyF,EAAMD,IAAIxF,EAC3BM,EAAGmF,EAAMlB,IAAIjE,EAAImF,EAAMD,IAAIlF,EAC3BmE,EAAGgB,EAAMlB,IAAIE,EAAIgB,EAAMD,IAAIf,SAGpC,CAACY,EAAOrF,EAAGqF,EAAO/E,EAAG+E,EAAOZ,EAAGa,EAAQC,IAE1C,OADAxI,YAAS4I,GACF,IAAInB,UAAQiB,EAAMlB,IAAIvE,EAAGyF,EAAMlB,IAAIjE,EAAGmF,EAAMlB,IAAIE,G,YClB3D,SAASmB,EAAT,GAAqD,IAAjCP,EAAgC,EAAhCA,OACVQ,EAAW1B,mBAD+B,EAEzB2B,cAAfC,EAFwC,EAExCA,GAAIC,EAFoC,EAEpCA,OAEZ,OADAjJ,aAAS,kBAAM8I,GAAYA,EAASxB,SAAWwB,EAASxB,QAAQ4B,YAE5D,mCACIhF,IAAK4E,EACLzJ,KAAM,CAAC4J,EAAQD,EAAGG,YAClBC,eAAa,EACbd,OAAQA,EACRe,cAAe,GACfC,YAAa,KAbzBC,YAAO,CAAEC,oBAgEF,IAAMC,EAAkC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,eAAgBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAClEpC,EAzCH,SAAsBkC,EAAtB,GAAkG,IAAjDC,EAAgD,EAAhDA,SAAUE,EAAsC,EAAtCA,OAAQD,EAA8B,EAA9BA,MAA8B,EAC1Eb,cAAlB9I,EAD4F,EAC5FA,MAAOgJ,EADqF,EACrFA,OACTa,EAAI7J,EAAM8J,mBAAsBF,GAAU,KAAO,MAAU,EAAIhL,KAAKmL,KAAOnL,KAAKmL,GAAK,EACrF/G,EAAI0G,EAAW9K,KAAKoL,IAAIH,GAAKJ,EAAezG,EAC5CyE,EAAIiC,EAAW9K,KAAKqL,IAAIJ,GAAKJ,EAAehC,EAC5CyC,EAAU,IAAI1C,UAAQxE,EAAGyG,EAAenG,EAAGmE,GAC3C0C,EAAShC,EAAO,IAAIX,UAAQ,EAAG,EAAG,IAAK0C,EAAS,CAAE3B,OAAQ,KAAOD,OAAQ,KACzE8B,EAAYjC,EAAO,IAAIX,UAAQ,EAAG,EAAG,GAAIiC,EAAgB,CAC3DlB,OAAQ,IACRD,OAAQ,MAEZ,OAAKqB,EAIMS,GAHPpB,EAAOqB,OAAOD,GACdpB,EAAOtK,SAASgK,IAAIyB,EAAOnH,EAAGmH,EAAO7G,EAAG6G,EAAO1C,GAI5C0C,GAwBKG,CAAab,EAAgB,CAAEC,WAAUC,UACrD,OACI,qCACMA,GAAS,qDAAmBxK,OAAO,WAAewK,GAAS,CAAEjL,SAAU6I,GAA9D,CAAsEnI,KAAM,CAAC,GAAI,EAAG,EAAG,QACjGuK,GAAS,kBAACf,EAAD,CAAUP,OAAQd,MC7BxC,SAASgD,EAAY1H,EAAY2H,EAAmBjI,EAAekI,GAC/D,OAAO,IAAIjD,WACN3E,EAAEG,EAAIwH,EAASxH,GAAKyH,GACpB5H,EAAES,EAAIkH,EAASlH,GAAKmH,GACpB5H,EAAE4E,EAAI+C,EAAS/C,GAAKgD,EAAelI,EAAQkI,EAAe,GAO5D,SAASC,EACZ7H,EACA8H,EACAC,EACAC,EACAJ,GAYA,OAAOF,EAAY1H,EALF,IAAI2E,WAChBmD,EAAMzG,MAAM,GAAKyG,EAAMzG,MAAM,IAAM,GACnCyG,EAAMxG,OAAO,GAAKwG,EAAMxG,OAAO,IAAM,GACrCwG,EAAMpI,MAAM,GAAKoI,EAAMpI,MAAM,IAAM,GAERoI,EAAMpI,MAAM,GAAKoI,EAAMpI,MAAM,GAAIkI,GAG9D,SAASK,EAAeH,GAAgB,IACnCI,EAAajC,cAAbiC,SACF7G,EAAQyG,EAAMzG,MAAM,GAAKyG,EAAMzG,MAAM,GACrCC,EAASwG,EAAMxG,OAAO,GAAKwG,EAAMxG,OAAO,GACxC5B,EAAQoI,EAAMpI,MAAM,GAAKoI,EAAMpI,MAAM,GAC3C,OAAOlE,mBAAQ,WACX,IAAM2M,EAAWpM,KAAKC,IAAIqF,EAAOC,EAAQ5B,GAEzC,OADkB3D,KAAKE,IAAIiM,EAAS5G,OAAQ4G,EAAS7G,OAClC8G,IACpB,CAAC9G,EAAOC,EAAQ5B,EAAOwI,EAAS5G,OAAQ4G,EAAS7G,QCpEjD,IAAM+G,EAAwB,SAAC,GAAwD,IAAtDN,EAAqD,EAArDA,MAAOO,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,KAAMzB,EAAY,EAAZA,MAAY,EAC7Db,cAApB9I,EADiF,EACjFA,MAAO+K,EAD0E,EAC1EA,SAD0E,EAEjDnL,mBAAmB,IAF8B,mBAElFyL,EAFkF,KAEpEC,EAFoE,KAInFb,EAAcK,EAAeH,GACnCrK,qBACI,kBACIgL,GAAgB,SAAC7C,GAAD,OACZ2C,EACKzK,QAAO,SAAA4K,GAAC,QAAMA,EAAEC,MAChB5I,QACG,SAACC,EAAGC,GAAJ,4BACOD,EADP,eAEKC,EAAE0I,GAAM,CACLtN,SAAU4E,EAAE5E,SAASI,KACjB,SAACC,EAASW,GAAV,4BAEWX,EAFX,CAGQE,WAAW,GAAD,OAAKF,EAAQE,YAAb,OAA0BS,GAC9BuJ,EAAM3F,EAAE0I,MAAR,UAAgB/C,EAAM3F,EAAE0I,WAAxB,aAAgB,EAAcC,QAAU,GADpC,MAEV1M,MAAOiB,EAAM8J,iBAAoB5K,EAAI4D,EAAE5E,SAASqC,OAAU,OAGtEkL,QAAQ,UAAAhD,EAAM3F,EAAE0I,WAAR,eAAcC,QAAS,GAAK3I,EAAE5E,SAASqC,YAGvDkI,QAGhB,CAAC2C,EAAME,EAAiBtL,IAE5B,IAAM0L,EDwCH,SAA0Bf,GAE7B,IAAMF,EAAcK,EAAeH,GAM7BH,EAAW,IAAIhD,WAChBmD,EAAMzG,MAAM,GAAKyG,EAAMzG,MAAM,IAAM,GACnCyG,EAAMxG,OAAO,GAAKwG,EAAMxG,OAAO,IAAM,GACrCwG,EAAMpI,MAAM,GAAKoI,EAAMpI,MAAM,IAAM,GAExC,OAAOlE,mBAAgB,WACnB,IAAMsN,EAAQhB,EAAMgB,MAAMrN,KAAoB,SAAAsN,GAAI,MAAK,CACnD3E,KAAM2E,EAAK3E,KACXvI,SAAU6L,EAAYqB,EAAKlN,SAAU8L,EAAUG,EAAMpI,MAAM,GAAKoI,EAAMpI,MAAM,GAAIkI,GAChFvG,MAAO0H,EAAK1H,MAAQuG,EACpBtG,OAAQyH,EAAKzH,OAASsG,EACtBlI,MAAOqJ,EAAKrJ,MAAQkI,MAElB9C,EAAQgD,EAAMhD,MAAMrJ,KAAoB,gBAAGkB,EAAH,EAAGA,OAAH,MAA2B,CACrEqM,KAD0C,EAAWA,KAErDL,GAF0C,EAAiBA,GAG3DhM,OAAQA,EAAOlB,KAAI,SAAAuE,GAAC,OAAI0H,EAAY1H,EAAG2H,EAAUG,EAAMpI,MAAM,GAAKoI,EAAMpI,MAAM,GAAIkI,UAEhFvG,GAASyG,EAAMzG,MAAM,GAAKyG,EAAMzG,MAAM,IAAMuG,EAC5CtG,GAAUwG,EAAMxG,OAAO,GAAKwG,EAAMxG,OAAO,IAAMsG,EACrD,MAAO,CACHvG,MAAO,EAAU,GAATA,EAAsB,GAARA,GACtBC,OAAQ,CAAU,GAATA,EAAuB,GAATA,GACvBwH,QACAhE,QACApF,MAAO,EAlFG,IAkFc,MAE7B,CAACkI,EAAaD,EAAUG,IC3EPmB,CAAiBnB,GAE/BzD,EAAWvH,uBACb,SAACP,GACG8L,EAAa9L,KAGjB,CAAC8L,IAECzL,EAAWE,uBACb,SAACL,EAAkBC,EAAgBrB,GAC/BoN,GAAgB,SAAC7C,GAAD,4BACTA,GADS,mBAEXnJ,EAFW,eAEMmJ,EAAMnJ,IAAa,CAAEmM,MAAO,GAFlC,CAEwCvN,cAAUkC,KAFlD,cAGXb,EAHW,eAIJkJ,EAAMlJ,IAAW,CAAEkM,MAAO,GAJtB,CAKRvN,SAAUA,EAASI,KAAI,SAAAoC,GAAC,sBAAUA,EAAV,CAAa3B,MAAOiB,EAAM8J,yBAL1C,SASpB,CAAC9J,IAEC+L,EAAe1N,mBAAQ,kBAAM2N,kBAAQN,EAAY/D,OAAO,SAAAsE,GAAC,OAAIA,EAAEJ,UAAO,CAACH,IACvEC,EAAQtN,mBAAQ,WAClB,OAAOqN,EAAYC,MAAMrN,KAAe,SAAAsN,GAAS,IAAD,EACtCjE,GAASoE,EAAaH,EAAK3E,OAAS,IAAI3I,KAAkB,SAAAsJ,GAAI,MAAK,CACrEpI,OAAQoI,EAAKpI,OACbrB,SAAU,EACVmB,SAAUsI,EAAKiE,KACftM,OAAQqI,EAAK4D,GACb/L,eAEJ,MAAO,CACHf,SAAUkN,EAAKlN,SACfuI,KAAM2E,EAAK3E,KACXxH,WACAyE,MAAO0H,EAAK1H,MACZC,OAAQyH,EAAKzH,OACb5B,MAAOqJ,EAAKrJ,MACZ2E,SAAUA,EACVhJ,SAAWmN,EAAaO,EAAK3E,QAAlB,UAA2BoE,EAAaO,EAAK3E,aAA7C,aAA2B,EAAyB/I,gBAAakC,EAC5EuH,cAGT,CAAC+D,EAAaxE,EAAUmE,EAAc5L,EAAUsM,IAE7CG,EAAoB7N,mBAAQ,WAC9B,IAAM8N,EAAQT,EAAYC,MAAMS,WAAU,SAAAb,GAAC,OAAIA,EAAEtE,OAASkE,KAC1D,OAAIgB,GAAS,EAAUA,EAChB,OACR,CAAChB,EAAcO,IAClB,OACI,oCACI,kBAAC,EAAD,CACI/B,MAAOA,EACPF,eAC0B,OAAtByC,EACMxB,EACI,IAAIlD,WACCmD,EAAMzG,MAAM,GAAKyG,EAAMzG,MAAM,IAAM,GACnCyG,EAAMxG,OAAO,GAAKwG,EAAMxG,OAAO,IAAM,GACrCwG,EAAMpI,MAAM,GAAKoI,EAAMpI,MAAM,IAAM,GAExCoI,EACAI,EAAS7G,MACT6G,EAAS5G,OACTsG,GAEJ,IAAIjD,UACAmE,EAAMO,GAAmBxN,SAASsE,EAClC2I,EAAMO,GAAmBxN,SAAS4E,EAClCqI,EAAMO,GAAmBxN,SAAS+I,GAGhDiC,SAA2B,OAAjByB,EAAwB,EAAI,MAEzCQ,EAAMrN,KAAI,SAACsN,EAAM1M,GAAP,OACP,kBAAC,EAAD,eAAMV,IAAKoN,EAAK3E,MAAU2E,S,kCC9GnC,IAAMS,EAAY,SAAC,GAAsE,IAApEC,EAAmE,EAAnEA,aAAcC,EAAqD,EAArDA,UAAWZ,EAA0C,EAA1CA,MAAOhE,EAAmC,EAAnCA,MAAOgC,EAA4B,EAA5BA,MAA4B,EAC3D/J,mBAAwB,MADmC,mBACpFuL,EADoF,KACtEqB,EADsE,OAE3D5M,mBAAsB,MAFqC,mBAEpF6M,EAFoF,KAEtEC,EAFsE,KAGrF/B,ECVH,SAAmBgB,EAAkBhE,GAuExC,OAtEmBtJ,mBAAQ,WACvB,IAAIsM,EAAQgC,MADiB,uBAE7B,YAAgBhB,EAAhB,+CAAuB,CAAC,IAAbiB,EAAY,QACnBjC,EAAMkC,QAAQD,EAAE3F,KAAM2F,IAHG,6GAK7B,YAAgBjF,EAAhB,oDAAWsE,EAAX,QAAuBtB,EAAMmC,QAAQb,EAAEJ,KAAMI,EAAET,GAAIS,IALtB,kFAM7B,IAAMc,EAASC,IAASrC,EAAO,CAAEsC,SAAU,KANd,uBAO7B,YAAgBtB,EAAhB,+CAAuB,CAAC,IAAbiB,EAAY,aACPxM,IAARwM,EAAE5J,QAA2B5C,IAARwM,EAAEtJ,QAA2BlD,IAARwM,EAAEnF,GAC5CsF,EAAOG,gBAAgBN,EAAE3F,MAAO,IAAM2F,EAAE5J,GAAK,IAAK4J,EAAEtJ,GAAqB,IAAhB1E,KAAKuO,SAAgBP,EAAEnF,GAAK,IAThE,kFAY7B,IAAK,IAAIvI,EAAI,EAAGA,EAfC,MAeuBA,EACpC6N,EAAOK,OAEX,IAAMC,EAA6B1B,EAAMrN,KAAI,SAAAsO,GAAM,IAAD,EAC1BG,EAAOO,gBAAgBV,EAAE3F,MAArCjE,EADsC,EACtCA,EAAGM,EADmC,EACnCA,EAAGmE,EADgC,EAChCA,EACd,MAAO,CACHR,KAAM2F,EAAE3F,KACR/C,MAAO0I,EAAE1I,MACTC,OAAQyI,EAAEzI,OACV5B,MAAOqK,EAAErK,MACT7D,SAAU,IAAI8I,UAAQxE,EAAGM,EAAGmE,OAG9B8F,EAA6B5F,EAAMrJ,KAAI,SAAA2N,GAAM,IAAD,IACxCuB,EAAUT,EAAOO,gBAAgBrB,EAAEJ,MACnC4B,EAAQV,EAAOO,gBAAgBrB,EAAET,IACjClM,EAAQ,UAAGqL,EAAM+C,QAAQzB,EAAEJ,aAAnB,aAAG,EAAuB8B,KAClCpO,EAAM,UAAGoL,EAAM+C,QAAQzB,EAAET,WAAnB,aAAG,EAAqBmC,KAE9BC,EAAM,SAAC/B,EAAcL,EAAYqC,GAA3B,OAA8CrC,EAAKK,GAAQgC,EAAQhC,GAEzEiC,EAAe,SAACvG,EAAcwG,GAChC,OAAKA,EACO,IAAIvG,UAAQD,EAAIvE,EAAI1D,EAAS4E,MAAQ,EAAGqD,EAAIjE,EAAGiE,EAAIE,GAD3C,IAAID,UAAQD,EAAIvE,EAAIzD,EAAO2E,MAAQ,EAAGqD,EAAIjE,EAAGiE,EAAIE,IAInEuG,EAAO,IAAIxG,UACboG,EAAIJ,EAAQxK,EAAGyK,EAAMzK,EAAG,IACxB4K,EAAIJ,EAAQlK,EAAGmK,EAAMnK,EAAG,IACxBsK,EAAIJ,EAAQ/F,EAAGgG,EAAMhG,EAAG,KAEtBwG,EAAYH,EAAa,IAAItG,UAAQgG,EAAQxK,EAAGwK,EAAQlK,EAAGkK,EAAQ/F,IAAI,GACvEyG,EAAUJ,EAAa,IAAItG,UAAQiG,EAAMzK,EAAGyK,EAAMnK,EAAGmK,EAAMhG,IAAI,GAC/D0G,EAAW,IAAI3G,UACjByG,EAAUjL,EAAI1D,EAAS4E,MAAQ,EAC/B0J,EAAIK,EAAU3K,EAAG4K,EAAQ5K,EAAG,IAC5BsK,EAAIK,EAAUxG,EAAGyG,EAAQzG,EAAG,KAE1B2G,EAAS,IAAI5G,UACf0G,EAAQlL,EAAIzD,EAAO2E,MAAQ,EAC3B0J,EAAIK,EAAU3K,EAAG4K,EAAQ5K,EAAG,IAC5BsK,EAAIK,EAAUxG,EAAGyG,EAAQzG,EAAG,KAEhC,MAAO,CACHoE,KAAMI,EAAEJ,KACRL,GAAIS,EAAET,GACNhM,OAAQ,CAACyO,EAAWE,EAAUH,EAAMI,EAAQF,OA1DvB,EA6DMnB,EAAOsB,eAC1C,MAAO,CACH1C,MAAO0B,EACP1F,MAAO4F,EACPrJ,MAAO,CAjEkB,EA6DrBoK,GA7DqB,EA6DjBC,IAKRpK,OAAQ,CAlEiB,EA6DbqK,GA7Da,EA6DTC,IAMhBlM,MAAO,CAnEkB,EA6DLmM,GA7DK,EA6DDC,OAQ7B,CAAChD,EAAOhE,ID5DGiH,CAAUjD,EAAOhE,GACzBuD,EAAevL,uBACjB,YAA0D,IAAvDsH,EAAsD,EAAtDA,KAAMK,EAAgD,EAAhDA,KACLkF,EAAQvF,GACRyF,EAAQpF,KAEZ,CAACkF,EAASE,IAGRxO,EAAWG,mBAAQ,kBAAOkO,GAAaD,GAAgBC,EAAUjO,KAAI,SAAC8C,EAAGlC,GAAJ,MAAW,CAAET,WAAY2C,OAAU,KAAI,CAC9GmL,EACAD,IAEEuC,EAAS1H,mBACT2H,EAAS3H,mBACT4H,EAAS5H,mBACT6H,EAAS7H,mBACT8H,EAAe9H,mBACf+H,EAAe/H,mBACfgI,EAAehI,mBACfiI,EAAejI,mBAErB7G,qBAAU,WACc,IAAD,QAAdmM,IACD,UAAAoC,EAAOxH,eAAP,SAAgBgD,OAAO,IAAI7C,UAAQ,EAAG,EAAG,IACzC,UAAAsH,EAAOzH,eAAP,SAAgBgD,OAAO,IAAI7C,UAAQ,EAAG,EAAG,IACzC,UAAAuH,EAAO1H,eAAP,SAAgBgD,OAAO,IAAI7C,UAAQ,EAAG,EAAG,IACzC,UAAAwH,EAAO3H,eAAP,SAAgBgD,OAAO,IAAI7C,UAAQ,EAAG,EAAG,KAEzCyH,EAAa5H,SAAS4H,EAAa5H,QAAQ4B,SAC3CiG,EAAa7H,SAAS6H,EAAa7H,QAAQ4B,SAC3CkG,EAAa9H,SAAS8H,EAAa9H,QAAQ4B,SAC3CmG,EAAa/H,SAAS+H,EAAa/H,QAAQ4B,WAEhD,CAACwD,EAAcwC,EAAcC,EAAcC,EAAcC,IAC5D,IAAMC,EAAW1P,uBAAY,SAAAkD,GAAC,OAAI2J,EAAQ,QAAO,CAACA,IAClD,OACI,kBAAC,IAAD,CAAQ8C,WAAYC,OAAOC,iBAAkBC,eAAgBJ,GACzD,kCAAcjQ,KAAM,CAAC,SAAW,OAChC,sCAAkB6E,IAAK4K,EAAQnQ,SAAU,CAAC,EAAG,GAAI,GAAIU,KAAM,CAAC,SAAW,MACtEqN,GACG,oCACI,+BACIxI,IAAK4K,EACLxG,OAAQoE,QAAgBrM,EACxBsP,UAAW,EACXhR,SAAU,CAAC,GAAI,EAAG,GAClBU,KAAM,CAAC,SAAW,MAEtB,+BACI6E,IAAK6K,EACLY,UAAW,EACXrH,OAAQoE,QAAgBrM,EACxB1B,SAAU,EAAE,GAAI,EAAG,GACnBU,KAAM,CAAC,SAAW,MAEtB,+BACI6E,IAAK8K,EACLW,UAAW,EACXrH,OAAQoE,QAAgBrM,EACxB1B,SAAU,EAAE,GAAI,GAAI,IACpBU,KAAM,CAAC,SAAW,MAEtB,sCACI6E,IAAK+K,EACL3G,OAAQoE,QAAgBrM,EACxB1B,SAAU,CAAC,GAAI,GAAI,IACnBU,KAAM,CAAC,SAAW,OAQ9B,kBAAC,EAAD,CACIuL,MAAOA,EACPS,KAAM,CAAC,CAAEI,GAAIc,EAAcpO,aAC3BiN,aAAcA,EACdD,aAAcA,EACdvB,MAAOA,M,yBEvFVgG,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACrBhQ,mBAAwB,MADH,mBACpDiQ,EADoD,KACvCC,EADuC,OAE3BlQ,mBAA+B,MAFJ,mBAEpDmQ,EAFoD,KAE1CC,EAF0C,KAGrDC,EAAW9I,iBAAgC,MAC3C+I,EAAWvQ,uBAAY,WAAM,4CAC/B,gCAAAwQ,EAAA,6DACUC,EAAkB,GAD5B,SAEyBC,UAAUC,aAAaC,gBAAgB,CAAEC,OAAO,EAAMC,OAAO,IAFtF,cAEUC,EAFV,OAGIT,EAAS5I,QAASsJ,UAAYD,GACxBE,EAAU,IAAIC,cAAcH,EAAQ,CAAEI,SAAU,kCAC9CC,gBAAkB,SAAA9E,GAAC,OAAImE,EAAQY,KAAK/E,EAAE0B,OAC9CiD,EAAQK,OAAS,WACb,IAAMC,EAAO,IAAIC,KAAKf,EAAS,CAAEgB,KAAMhB,EAAQ,GAAGgB,OAClDtB,EAAeuB,IAAIC,gBAAgBJ,KAEvCN,EAAQW,QACRvB,EAAYY,GAXhB,kBAYW,MAZX,6CAD+B,sBAe3BX,EAAS5I,SAfmB,WAAD,wBAeTmK,KACvB,CAACvB,IACEwB,EAAS9R,uBAAY,kBAAMoQ,GAAYA,EAAS2B,SAAQ,CAAC3B,IAC/D,OACI,yBAAK/J,MAAO,CAAE2L,QAAS,EAAGtN,gBAAiB,UAAWH,MAAO,MACzD,2BAAO8B,MAAO,CAAE4L,QAAS,SAAU1N,MAAO,EAAGC,OAAQ,GAAKF,IAAKgM,IAC9DJ,EACG,uBAAGgC,KAAMhC,EAAaiC,SAAUlC,EAAW,SAA3C,qBAGCG,EAGD,4BAAQzL,QAASmN,GAAjB,kBAFA,4BAAQnN,QAAS4L,GAAjB,qBCtBV6B,EAAa,CAAE7N,MAdP,GAccC,OAfb,GAeqB5B,MAbtB,IAcRoJ,EAAQ,CAAC,aACT1E,KAbY,eAaQ8K,EADZ,CACwB/O,EAAG,MAD3B,aAERiE,KAbY,eAaQ8K,EAFZ,CAEwB/O,EAAG,MAF3B,aAGRiE,KAbY,eAaQ8K,EAHZ,CAGwB/O,EAAG,MAH3B,aAIRiE,KAbe,iBAaQ8K,GAJf,aAKR9K,KAbY,eAaQ8K,EALZ,CAKwB/O,GAAI,MAL5B,aAMRiE,KAbY,eAaQ8K,EANZ,CAMwB/O,GAAI,MAN5B,aAORiE,KAbY,eAaQ8K,EAPZ,CAOwB/O,GAAI,MAP5B,aAQRiE,KAbY,eAaQ8K,EARZ,CAQwB/O,GAAI,MAR5B,aASRiE,KAbgB,aAaQ8K,EAThB,CAS4BzO,GAAI,OAGxCqE,EAAQ,CACV,CAAEkE,KAzBY,cAyBKL,GAtBF,gBAsBoBwG,OAAQ,GAC7C,CAAEnG,KAzBY,cAyBKL,GAvBF,gBAuBoBwG,OAAQ,GAC7C,CAAEnG,KAzBY,cAyBKL,GAxBF,gBAwBoBwG,OAAQ,GAC7C,CAAEnG,KAzBe,gBAyBKL,GAxBR,cAwBuBwG,OAAQ,GAC7C,CAAEnG,KA1Be,gBA0BKL,GAxBR,cAwBuBwG,OAAQ,GAC7C,CAAEnG,KA3Be,gBA2BKL,GAxBR,cAwBuBwG,OAAQ,GAC7C,CAAEnG,KA5Be,gBA4BKL,GAxBR,cAwBuBwG,OAAQ,GAC7C,CAAEnG,KA1BY,cA0BKL,GAxBD,YAwBoBwG,OAAQ,IAE5CC,EAAc,CAChB5N,gBAAiB,QACjBrF,MAAO,OACPmF,OAAQ,GACR+N,WAAY,OACZC,OAAQ,GAkDGC,EA/CO,WAAO,IAAD,EACAxS,mBAA6C,MAD7C,mBACjByS,EADiB,KACXC,EADW,OAEE1S,oBAAkB,GAFpB,mBAEjB+J,EAFiB,KAEV4I,EAFU,KAGlBC,EAAQ7S,uBAAY,kBAAM2S,EAAQ,CAAEG,GA7C5B,cA6C2CrR,EAAG,CAAC,UAAU,CAACkR,IAClEI,EAAQ/S,uBAAY,kBAAM2S,EAAQ,CAAEG,GA7C5B,cA6C2CrR,EAAG,CAAC,UAAU,CAACkR,IAClEK,EAAQhT,uBAAY,kBAAM2S,EAAQ,CAAEG,GA7C5B,cA6C2CrR,EAAG,CAAC,UAAU,CAACkR,IAClEM,EAAcjT,uBAChB,YAAiB,IAAd0I,EAAa,EAAbA,OACCwK,QAAQC,IAAI,WAAazK,EAAO0K,SAChCR,EAASlK,EAAO0K,WAEpB,CAACR,IAGL,OACI,yBAAKS,UAAU,OACX,4BAAQA,UAAU,cACd,iDACA,4BAAQhN,MAAOiM,EAAa3N,QAASkO,GAArC,oBAGA,4BAAQxM,MAAOiM,EAAa3N,QAASoO,GAArC,oBAGA,4BAAQ1M,MAAOiM,EAAa3N,QAASqO,GAArC,oBAGA,2BAAOK,UAAU,SAAShN,MAAO,CAAEmM,OAAQ,IACvC,2BAAOa,UAAU,eAAe5B,KAAK,WAAW2B,QAASpJ,EAAOsJ,SAAUL,IAC1E,0BAAMI,UAAU,eAAeE,UAAQ,MAAMC,WAAS,SACtD,0BAAMH,UAAU,mBAEpB,6BACI,kBAAC,EAAD,CAAcpD,SAAS,YAG/B,kBAAC,EAAD,CACItD,aAAe+F,GAAQA,EAAKI,IAAO,KACnClG,UAAW8F,GAAQA,EAAKjR,EACxBuK,MAAOA,EACPhE,MAAOA,EACPgC,MAAOA,MChFHyJ,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/N,SAASgO,eAAe,SDqI3C,kBAAmBrD,WACrBA,UAAUsD,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.05a309c5.chunk.js","sourcesContent":["import React, { FC, useMemo } from \"react\";\nimport { CatmullRomCurve3 } from \"three\";\n\nexport interface MessageProps {\n    messageKey: string;\n    value?: number;\n    content?: string;\n}\n\nexport interface MessageArrived extends MessageProps {\n    frame: number;\n}\n\ninterface EdgeMessagesProps {\n    curve: CatmullRomCurve3;\n    messages: MessageArrived[] | undefined;\n    duration: number;\n    elapsed: number;\n    prefix: string;\n}\n\nexport const EdgeMessages: FC<EdgeMessagesProps> = ({ prefix, curve, elapsed, messages, duration }) => {\n    const messageMeshes = useMemo(() => {\n        return (messages || []).map(message => {\n            return {\n                key: message.messageKey,\n                position: curve.getPointAt(Math.max(0, Math.min(1, (elapsed - message.frame) / duration))),\n                color: message.messageKey[0] === \"1\" ? \"#4070f0\" : message.messageKey[0] === \"2\" ? \"#f07040\" : \"#70f040\"\n            };\n        });\n    }, [elapsed, messages, curve, duration]);\n\n    return (\n        <>\n            {messageMeshes.map((messageMesh, i) => {\n                return (\n                    <mesh key={prefix + i} position={messageMesh.position}>\n                        <sphereGeometry attach=\"geometry\" args={[0.076]} />\n                        <meshPhongMaterial attach=\"material\" color={messageMesh.color} />\n                    </mesh>\n                );\n            })}\n        </>\n    );\n};\n","import { keyBy } from \"lodash\";\nimport React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport { CatmullRomCurve3, Vector3 } from \"three\";\nimport { MessageArrived, EdgeMessages } from \"./messages\";\nimport { NodeProps, NodeType } from \"./node\";\n\nexport function usePath(points: Vector3[]) {\n    return useMemo(() => {\n        return new CatmullRomCurve3(points, false, \"catmullrom\");\n    }, [points]);\n}\n\nfunction useTrackMessages(\n    messagePump: MessageArrived[] | undefined,\n    duration: number,\n    elapsedTime: number,\n    onEgress: (messages: MessageArrived[]) => void\n) {\n    const [messages, setMessages] = useState<MessageArrived[] | undefined>(undefined);\n    useEffect(() => {\n        if (!messagePump || messagePump.length === 0) return;\n        // console.log(\"New messages: \" + JSON.stringify(messagePump));\n        setMessages(msg => [...(msg || []), ...messagePump]);\n    }, [messagePump, duration]);\n    const unexpiredMessages = useMemo<MessageArrived[]>(() => {\n        if (!messages || messages.length === 0) return [];\n        const m = messages[0];\n        if (elapsedTime >= m.frame + duration) {\n            return messages.filter(m => elapsedTime < m.frame + duration);\n        } else {\n            return messages;\n        }\n    }, [messages, duration, elapsedTime]);\n\n    const expiredMessages = useMemo(() => {\n        const emptyArray: MessageArrived[] = [];\n        if (!messages || messages.length === 0) {\n            return emptyArray;\n        }\n        const m = messages[0];\n        if (elapsedTime >= m.frame + duration) {\n            // console.log(\"Filtering \");\n            return messages.filter(m => elapsedTime >= m.frame + duration);\n        } else return emptyArray;\n    }, [messages, duration, elapsedTime]);\n\n    useEffect(() => {\n        if (!expiredMessages || expiredMessages.length === 0) return;\n        const keyed = keyBy(expiredMessages, m => m.messageKey);\n        setMessages(msg => (msg || []).filter(m => !keyed[m.messageKey]));\n    }, [expiredMessages]);\n\n    useEffect(() => {\n        // console.log({ elapsedTime });\n        if (!expiredMessages || expiredMessages.length === 0) return;\n        // console.log(\"Time to delete: \" + expiredMessages.length + \" \" + messages?.length);\n        onEgress(expiredMessages);\n    }, [duration, expiredMessages, onEgress]);\n    return unexpiredMessages;\n}\n\nexport interface EdgeProps extends Pick<NodeProps, \"onEgress\"> {\n    points: Vector3[];\n    duration: number;\n    fromNode: string;\n    toNode: string;\n    elapsed: number;\n    messages?: MessageArrived[];\n}\n\nexport const Edge: FC<EdgeProps> = ({ fromNode, toNode, messages, points, duration, elapsed, onEgress }) => {\n    const _onEgress = useCallback((messages: MessageArrived[]) => onEgress(fromNode, toNode, messages), [\n        fromNode,\n        toNode,\n        onEgress\n    ]);\n    const [elapsedMs, setElapsedMs] = useState(0);\n    useFrame(({ clock }) => {\n        setElapsedMs(clock.elapsedTime);\n    });\n\n    const messagesBuffered = useTrackMessages(messages, duration, elapsed, _onEgress);\n    const curve = usePath(points);\n    return (\n        <>\n            <mesh key={`${fromNode}-${toNode}-edge`}>\n                <tubeGeometry attach=\"geometry\" args={[curve, 80, 0.03, 8, false]} />\n                <meshPhongMaterial attach=\"material\" color=\"#333\" />\n            </mesh>\n            <EdgeMessages\n                key={`${fromNode}-${toNode}-messages`}\n                elapsed={elapsedMs}\n                prefix={`${fromNode}-${toNode}-messages`}\n                curve={curve}\n                duration={duration}\n                messages={messagesBuffered}\n            />\n        </>\n    );\n};\n","import React, { forwardRef, useCallback, useMemo } from \"react\";\nimport { ExtrudeBufferGeometry, ExtrudeGeometryOptions, LineCurve3, Mesh, Shape, Vector2, Vector3 } from \"three\";\n\n// export type MeshNode = ReactThreeFiber.Object3DNode<Mesh, typeof Mesh>;\n\nexport interface TextProps {\n    width: number;\n    height: number;\n    text: string;\n    depth: number;\n    backgroundColor?: string;\n    color?: string;\n    position: Vector3;\n    onClick: (args: { text: string }) => void;\n}\n\nconst stepFunction = (v: number, neg = false) => (neg ? 1 - (v / Math.abs(v) + 1) / 2 : (v / Math.abs(v) + 1) / 2);\n\nconst generateTopUV = (\n    geometry: ExtrudeBufferGeometry,\n    vertices: number[],\n    indexA: number,\n    indexB: number,\n    indexC: number\n) => {\n    const rear = vertices[indexA * 3 + 2] < 0;\n    var a_x = stepFunction(vertices[indexA * 3], rear);\n    var a_y = stepFunction(vertices[indexA * 3 + 1], false);\n    var b_x = stepFunction(vertices[indexB * 3], rear);\n    var b_y = stepFunction(vertices[indexB * 3 + 1], false);\n    var c_x = stepFunction(vertices[indexC * 3], rear);\n    var c_y = stepFunction(vertices[indexC * 3 + 1], false);\n    return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n};\n\nconst generateSideWallUV = (\n    geometry: ExtrudeBufferGeometry,\n    vertices: number[],\n    indexA: number,\n    indexB: number,\n    indexC: number,\n    indexD: number\n) => {\n    const depth = (geometry as any)[\"parameters\"].options.depth;\n    const curves = (geometry as any)[\"parameters\"].shapes.curves as LineCurve3[];\n    const mX = curves.reduce(\n        (p, c) => [Math.min(p[0], c.v1.x, c.v2.x), Math.max(p[1], c.v1.x, c.v2.x)] as [number, number],\n        [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER] as [number, number]\n    );\n    const mY = curves.reduce(\n        (p, c) => [Math.min(p[0], c.v1.y, c.v2.y), Math.max(p[1], c.v1.y, c.v2.y)] as [number, number],\n        [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER] as [number, number]\n    );\n    const mZ = [0, depth] as [number, number];\n    const ofMax = (v: number, max: [number, number]) => (v - max[0]) / (max[1] - max[0]);\n    var a_x = ofMax(vertices[indexA * 3], mX);\n    var a_y = ofMax(vertices[indexA * 3 + 1], mY);\n    var a_z = ofMax(vertices[indexA * 3 + 2], mZ);\n    var b_x = ofMax(vertices[indexB * 3], mX);\n    var b_y = ofMax(vertices[indexB * 3 + 1], mY);\n    var b_z = ofMax(vertices[indexB * 3 + 2], mZ);\n    var c_x = ofMax(vertices[indexC * 3], mX);\n    var c_y = ofMax(vertices[indexC * 3 + 1], mY);\n    var c_z = ofMax(vertices[indexC * 3 + 2], mZ);\n    var d_x = ofMax(vertices[indexD * 3], mX);\n    var d_y = ofMax(vertices[indexD * 3 + 1], mY);\n    var d_z = ofMax(vertices[indexD * 3 + 2], mZ);\n\n    // if it's left or right side then x will not vary\n    if (Math.abs(a_x - b_x) < 0.01) {\n        const right = (x: number) => (a_x > 0.5 ? 1 - x : x);\n        return [\n            new Vector2(right(a_z), a_y),\n            new Vector2(right(b_z), b_y),\n            new Vector2(right(c_z), c_y),\n            new Vector2(right(d_z), d_y)\n        ];\n    } else {\n        return [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\n    }\n};\n\nexport const Text = forwardRef<Mesh, TextProps>(\n    ({ width, height, text, backgroundColor, color, depth, onClick, position, ...props }: TextProps, ref) => {\n        const _width = width;\n        const _height = height;\n        const _text = text;\n\n        const shape = useMemo(() => {\n            const __shape = new Shape();\n            __shape.moveTo((_width / 2) * -1, (_height / 2) * -1);\n            __shape.lineTo(_width / 2, (_height / 2) * -1);\n            __shape.lineTo(_width / 2, _height / 2);\n            __shape.lineTo((_width / 2) * -1, _height / 2);\n            __shape.lineTo((_width / 2) * -1, (_height / 2) * -1);\n            return __shape;\n        }, [_width, _height]);\n\n        const extrudeSettings = useMemo<ExtrudeGeometryOptions>(\n            () => ({\n                steps: 2,\n                depth: depth,\n                bevelEnabled: true,\n                bevelThickness: 0.03,\n                bevelSize: 0.02,\n                bevelOffset: 0.0,\n                bevelSegments: 5,\n                UVGenerator: { generateTopUV, generateSideWallUV }\n            }),\n            [depth]\n        );\n\n        const textCanvas = useMemo(() => {\n            const canvas = document.createElement(\"canvas\");\n            const context = canvas.getContext(\"2d\");\n            if (!context) return null;\n            const textureWidth = _width * 20;\n            const textureHeight = _height * 20;\n            canvas.style.position = \"absolute\";\n            canvas.style.top = `calc(50% - ${textureHeight / 2}px)`;\n            canvas.style.width = textureWidth + \"px\";\n            canvas.style.height = textureHeight + \"px\";\n            canvas.width = textureWidth * 20;\n            canvas.height = textureHeight * 20;\n            context.scale(20, 20);\n            context.fillStyle = backgroundColor || \"grey\";\n\n            context.fillRect(0, 0, textureWidth, textureHeight);\n            const fontSize = textureHeight / 1.8;\n            context.font = `bold ${fontSize}px Arial, sans-serif`;\n            context.fillStyle = color || \"white\";\n            context.textAlign = \"center\";\n            context.textBaseline = \"middle\";\n            const x = textureWidth / 2;\n            const y = textureHeight / 2;\n            context.fillText(_text, x, y);\n            return canvas;\n        }, [_width, _height, color, backgroundColor, _text]);\n        const _onClick = useCallback(() => {\n            onClick({ text });\n        }, [text, onClick]);\n        return (\n            <mesh ref={ref} onClick={_onClick} position={position} {...props}>\n                <boxBufferGeometry args={[_width, _height, depth]} attach=\"geometry\" />\n                <extrudeGeometry attach=\"geometry\" args={[shape, extrudeSettings]} />\n                <meshStandardMaterial roughness={0.2} metalness={0.8} attachArray=\"material\">\n                    <canvasTexture attach=\"map\" image={textCanvas} />\n                </meshStandardMaterial>\n                <meshStandardMaterial roughness={0.2} metalness={0.8} attachArray=\"material\">\n                    <canvasTexture attach=\"map\" image={textCanvas} />\n                </meshStandardMaterial>\n            </mesh>\n        );\n    }\n);\n\nText.defaultProps = { depth: 0.04, width: 1, height: 0.3, text: \"<null>\" };\n","import React, { FC, useCallback, useMemo, useState, useRef, RefObject } from \"react\";\nimport { Vector3, Mesh } from \"three\";\nimport { Edge, EdgeProps } from \"./edge\";\nimport { MessageProps, MessageArrived } from \"./messages\";\nimport { Text } from \"../three-utils/text\";\nimport { useFrame } from \"react-three-fiber\";\n\nexport type NodeEdgeType = Pick<EdgeProps, \"duration\" | \"messages\" | \"points\" | \"toNode\">;\nexport type NodeType = Pick<NodeProps, \"name\">;\nexport type MessageType = Pick<MessageProps, \"messageKey\">;\n\nexport interface NodeEdge {\n    to: string;\n    points: Vector3;\n}\n\nexport interface NodeProps {\n    position: Vector3;\n    width: number;\n    height: number;\n    depth: number;\n    name: string;\n    edges: NodeEdgeType[];\n    messages: MessageArrived[] | undefined;\n    onEgress: (fromNode: string, toNode: string, messages: MessageArrived[]) => void;\n    onSelect: (args: { name: string; mesh: Mesh }) => void;\n}\n\nexport function useCheckMessages(messages: MessageType[] | undefined) {\n    const [elapsedTime, setElpased] = useState(0);\n    useFrame(({ clock }) => {\n        setElpased(Math.floor(clock.elapsedTime * 100) / 100);\n    });\n    return elapsedTime;\n}\ninterface LabelProps {\n    name: string;\n    width: number;\n    depth: number;\n    height: number;\n    position: Vector3;\n    onSelect: (args: { name: string; mesh: Mesh }) => void;\n}\n\nexport const Label: FC<LabelProps> = ({ name, position, width, height, depth, onSelect }) => {\n    const ref = useRef<Mesh>() as RefObject<Mesh>;\n    const _onSelect = useCallback(\n        ({ text }: { text: string }) => ref.current && onSelect({ name: text, mesh: ref.current }),\n        [onSelect]\n    );\n    const pos = useMemo(() => new Vector3(position.x, position.y, position.z - depth / 2), [position, depth]);\n    return (\n        <Text\n            key={name}\n            ref={ref}\n            onClick={_onSelect}\n            text={name}\n            color={\"#202020\"}\n            width={width}\n            height={height * 0.25}\n            backgroundColor=\"#a0a0ff\"\n            depth={depth}\n            position={pos}\n        />\n    );\n};\n\nexport const Edges: FC<{ edges: EdgeProps[] }> = ({ edges }) => (\n    <>\n        {edges.map(edge => (\n            <Edge key={`${edge.fromNode}-${edge.toNode}-edge`} {...edge} />\n        ))}\n    </>\n);\n\nexport const Node: FC<NodeProps> = ({ name, onSelect, width, height, depth, position, messages, edges, onEgress }) => {\n    const elapsed = useCheckMessages(messages);\n    const edgeProps = useEdges(edges, name, messages, elapsed, onEgress);\n    return (\n        <>\n            <Label\n                key=\"label\"\n                name={name}\n                onSelect={onSelect}\n                width={width}\n                height={height}\n                depth={Math.abs(depth)}\n                position={position}\n            />\n            <Edges edges={edgeProps} />\n        </>\n    );\n};\n\nexport function useEdges(\n    edges: NodeEdgeType[],\n    name: string,\n    messages: MessageArrived[] | undefined,\n    elapsed: number,\n    onEgress: (fromNode: string, toNode: string, messages: MessageArrived[]) => void\n) {\n    return useMemo<EdgeProps[]>(\n        () =>\n            edges.map(edge => ({\n                ...edge,\n                duration: edge.duration, //+ Math.floor(Math.random() * 4),\n                fromNode: name,\n                messages,\n                elapsed,\n                onEgress\n            })),\n        [edges, name, elapsed, messages, onEgress]\n    );\n}\n","import { useCallback, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Vector3 } from \"three\";\n\ninterface UseVelConfig {\n    damper?: number;\n    spring?: number;\n}\n\nexport function useVel(initial: Vector3, target: Vector3, { damper = 0.72, spring = 0.003 }: UseVelConfig) {\n    const [state, set] = useState({ pos: { x: initial.x, y: initial.y, z: initial.z }, vel: { x: 0, y: 0, z: 0 } });\n    const onFrame = useCallback(() => {\n        set(state => ({\n            vel: {\n                x: ((target.x - state.pos.x) * spring + state.vel.x) * damper,\n                y: ((target.y - state.pos.y) * spring + state.vel.y) * damper,\n                z: ((target.z - state.pos.z) * spring + state.vel.z) * damper\n            },\n            pos: {\n                x: state.pos.x + state.vel.x,\n                y: state.pos.y + state.vel.y,\n                z: state.pos.z + state.vel.z\n            }\n        }));\n    }, [target.x, target.y, target.z, damper, spring]);\n    useFrame(onFrame);\n    return new Vector3(state.pos.x, state.pos.y, state.pos.z);\n}\n","import React, { FC, useCallback, useState, useRef } from \"react\";\nimport { useFrame, useThree, extend } from \"react-three-fiber\";\nimport { Vector3, PerspectiveCamera } from \"three\";\nimport { useVel } from \"./use-spring-3d\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nextend({ OrbitControls });\n\nfunction Controls({ target }: { target?: Vector3 }) {\n    const controls = useRef<OrbitControls>();\n    const { gl, camera } = useThree();\n    useFrame(() => controls && controls.current && controls.current.update());\n    return (\n        <orbitControls\n            ref={controls}\n            args={[camera, gl.domElement]}\n            enableDamping\n            target={target}\n            dampingFactor={0.1}\n            rotateSpeed={0.5}\n        />\n    );\n}\n\ninterface UseCameraRigOptions {\n    distance: number;\n    rotate?: number;\n    orbit?: boolean;\n}\n\nexport function useCameraPan(targetPosition: Vector3, { distance, rotate, orbit }: UseCameraRigOptions) {\n    const { clock, camera } = useThree();\n    const t = clock.getElapsedTime() * (((rotate || 360) / 56000) * (2 * Math.PI)) + Math.PI / 2;\n    const x = distance * Math.cos(t) + targetPosition.x;\n    const z = distance * Math.sin(t) + targetPosition.z;\n    const camPosS = new Vector3(x, targetPosition.y, z);\n    const camPos = useVel(new Vector3(0, 0, 10), camPosS, { spring: 0.006, damper: 0.9 });\n    const camLookAt = useVel(new Vector3(0, 0, 0), targetPosition, {\n        spring: 0.01,\n        damper: 0.85\n    });\n    if (!orbit) {\n        camera.lookAt(camLookAt);\n        camera.position.set(camPos.x, camPos.y, camPos.z);\n    } else {\n        return camLookAt;\n    }\n    return camPos;\n}\n\nexport function useSelectedNode(points: any[]) {\n    const [index, setIndex] = useState(0);\n    const cb = useCallback(\n        ({ clock }: any) => {\n            const time = clock.getElapsedTime() / 2;\n            const index = Math.floor(time) % points.length;\n            setIndex(index);\n        },\n        [points]\n    );\n    useFrame(cb);\n    return index;\n}\n\ninterface CameraRigggProps {\n    targetPosition: Vector3;\n    distance: number;\n    orbit?: boolean;\n}\n\nexport const CameraRig: FC<CameraRigggProps> = ({ targetPosition, distance, orbit }) => {\n    const pos = useCameraPan(targetPosition, { distance, orbit });\n    return (\n        <>\n            {!orbit && <perspectiveCamera attach=\"camera\" {...(!orbit && { position: pos })} args={[45, 2, 1, 100]} />}\n            {orbit && <Controls target={pos} />}\n        </>\n    );\n};\n","import { useMemo } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { Vector3 } from \"three\";\n\nexport interface PositionedNode {\n    name: string;\n    width: number;\n    height: number;\n    depth: number;\n    position: Vector3;\n}\n\nexport interface PositionedEdge {\n    name?: string;\n    messages?: number;\n    from: string;\n    to: string;\n    points: Vector3[];\n}\n\nexport type MinMax = [number, number];\n\nexport interface Layout {\n    nodes: PositionedNode[];\n    edges: PositionedEdge[];\n    width: MinMax;\n    height: MinMax;\n    depth: MinMax;\n}\n\n// export function usePath(edges: PositionedEdge[]) {\n//     const paths = useMemo(() => {\n//         const edgeCurves = edges.map(edge => ({\n//             edge,\n//             curve: new CatmullRomCurve3(edge.points, false, \"catmullrom\")\n//         }));\n//         return groupBy(edgeCurves, e => `${e.edge.from}**${e.edge.to}`);\n//     }, [edges]);\n//     return paths;\n// }\nconst viewPortDepth = -15;\n\n// function scaleToFit(p: number, sourceMin: number, targetRange: number, scaleFactor: number) {\n//     return (p - sourceMin) * scaleFactor + targetRange / -0.5;\n// }\n\nfunction scaleToFit3(p: Vector3, midGraph: Vector3, depth: number, scaleFactor: number) {\n    return new Vector3(\n        (p.x - midGraph.x) * scaleFactor, //- targetRange.x / 2,\n        (p.y - midGraph.y) * scaleFactor, //- targetRange.y / 2,\n        (p.z - midGraph.z) * scaleFactor - (depth * scaleFactor) / 2 //- targetRange.z\n        // scaleToFit(p.x, minGraph.x, targetRange.x, scaleFactor),\n        // scaleToFit(p.y, minGraph.y, targetRange.y, scaleFactor),\n        // scaleToFit(p.z, minGraph.z, targetRange.z, scaleFactor)\n    );\n}\n\nexport function scalePoint(\n    p: Vector3,\n    graph: Layout,\n    viewportWidth: number,\n    viewportHeight: number,\n    scaleFactor: number\n) {\n    // const targetRange = new Vector3(\n    //     viewportWidth * scaleFactor,\n    //     viewportHeight * scaleFactor,\n    //     viewPortDepth * scaleFactor\n    // );\n    const midGraph = new Vector3(\n        (graph.width[1] + graph.width[0]) / 2,\n        (graph.height[1] + graph.height[0]) / 2,\n        (graph.depth[1] + graph.depth[0]) / 2\n    );\n    return scaleToFit3(p, midGraph, graph.depth[1] - graph.depth[0], scaleFactor);\n}\n\nexport function useScaleFactor(graph: Layout) {\n    const { viewport } = useThree();\n    const width = graph.width[1] - graph.width[0];\n    const height = graph.height[1] - graph.height[0];\n    const depth = graph.depth[1] - graph.depth[0];\n    return useMemo(() => {\n        const maxGraph = Math.max(width, height, depth);\n        const minScreen = Math.min(viewport.height, viewport.width);\n        return minScreen / maxGraph;\n    }, [width, height, depth, viewport.height, viewport.width]);\n}\n\nexport function useGraphViewPort(graph: Layout): Layout {\n    // const { viewport } = useThree();\n    const scaleFactor = useScaleFactor(graph);\n    // const viewPortRange = new Vector3(\n    //     viewport.width, //* scaleFactor,\n    //     viewport.height, //* scaleFactor,\n    //     viewPortDepth //* scaleFactor\n    // );\n    const midGraph = new Vector3(\n        (graph.width[1] + graph.width[0]) / 2,\n        (graph.height[1] + graph.height[0]) / 2,\n        (graph.depth[1] + graph.depth[0]) / 2\n    );\n    return useMemo<Layout>(() => {\n        const nodes = graph.nodes.map<PositionedNode>(node => ({\n            name: node.name,\n            position: scaleToFit3(node.position, midGraph, graph.depth[1] - graph.depth[0], scaleFactor),\n            width: node.width * scaleFactor, //, graph.width, viewport.width),\n            height: node.height * scaleFactor, //, graph.height, viewport.height),\n            depth: node.depth * scaleFactor //, graph.depth, viewPortDepth)\n        }));\n        const edges = graph.edges.map<PositionedEdge>(({ points, from, to }) => ({\n            from: from,\n            to: to,\n            points: points.map(p => scaleToFit3(p, midGraph, graph.depth[1] - graph.depth[0], scaleFactor))\n        }));\n        const width = (graph.width[1] - graph.width[0]) * scaleFactor; //, graph.width, viewport.width);\n        const height = (graph.height[1] - graph.height[0]) * scaleFactor; //, graph.height, viewport.height);\n        return {\n            width: [width * -0.5, width * 0.5],\n            height: [height * 0.5, height * 0.5],\n            nodes,\n            edges,\n            depth: [viewPortDepth, -1]\n        };\n    }, [scaleFactor, midGraph, graph]);\n}\n","import { groupBy } from \"lodash\";\nimport React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { Vector3, Mesh } from \"three\";\nimport { MessageArrived, MessageProps } from \"../component/messages\";\nimport { Node, NodeEdgeType, NodeProps } from \"../component/node\";\nimport { CameraRig } from \"../three-utils/camera-rig\";\nimport { Layout, scalePoint, useGraphViewPort, useScaleFactor } from \"./use-graph-viewport\";\n\ninterface GraphProps {\n    graph: Layout;\n    feed: { to: string | null; messages: MessageProps[] }[];\n    onSelectNode: (args: { name: string; mesh: Mesh }) => void;\n    selectedNode?: string | null;\n    orbit: boolean;\n}\n\ntype FeedType = { [nodeName: string]: { count: number; messages: MessageArrived[] | undefined } | undefined };\nexport const Graph: FC<GraphProps> = ({ graph, onSelectNode, selectedNode, feed, orbit }) => {\n    const { clock, viewport } = useThree();\n    const [messageState, setMessageState] = useState<FeedType>({});\n    // const [selectedMesh, setSelectedMesh] = useState<Mesh | null>(null);\n    const scaleFactor = useScaleFactor(graph);\n    useEffect(\n        () =>\n            setMessageState((state: FeedType) =>\n                feed\n                    .filter(f => !!f.to)\n                    .reduce<FeedType>(\n                        (p, c) => ({\n                            ...p,\n                            [c.to!]: {\n                                messages: c.messages.map(\n                                    (message, i) =>\n                                        ({\n                                            ...message,\n                                            messageKey: `${message.messageKey}${i +\n                                                ((state[c.to!] && state[c.to!]?.count) || 0)}) `,\n                                            frame: clock.getElapsedTime() + (i / c.messages.length) * 5\n                                        } as MessageArrived)\n                                ),\n                                count: (state[c.to!]?.count || 0) + c.messages.length\n                            }\n                        }),\n                        state\n                    )\n            ),\n        [feed, setMessageState, clock]\n    );\n    const scaledGraph = useGraphViewPort(graph);\n\n    const onSelect = useCallback(\n        (args: { name: string; mesh: Mesh }) => {\n            onSelectNode(args);\n            // setSelectedMesh(args.mesh);\n        },\n        [onSelectNode]\n    );\n    const onEgress = useCallback(\n        (fromNode: string, toNode: string, messages: MessageArrived[]) => {\n            setMessageState((state: FeedType) => ({\n                ...state,\n                [fromNode]: { ...(state[fromNode] || { count: 0 }), messages: undefined },\n                [toNode]: {\n                    ...(state[toNode] || { count: 0 }),\n                    messages: messages.map(m => ({ ...m, frame: clock.getElapsedTime() }))\n                }\n            }));\n        },\n        [clock]\n    );\n    const edgesPerNode = useMemo(() => groupBy(scaledGraph.edges, e => e.from), [scaledGraph]);\n    const nodes = useMemo(() => {\n        return scaledGraph.nodes.map<NodeProps>(node => {\n            const edges = (edgesPerNode[node.name] || []).map<NodeEdgeType>(edge => ({\n                points: edge.points,\n                duration: 5,\n                fromNode: edge.from,\n                toNode: edge.to,\n                onEgress\n            }));\n            return {\n                position: node.position,\n                name: node.name,\n                onEgress,\n                width: node.width,\n                height: node.height,\n                depth: node.depth,\n                onSelect: onSelect,\n                messages: (messageState[node.name] && messageState[node.name]?.messages) || undefined,\n                edges\n            };\n        });\n    }, [scaledGraph, onSelect, messageState, onEgress, edgesPerNode]);\n\n    const selectedNodeIndex = useMemo(() => {\n        const index = scaledGraph.nodes.findIndex(f => f.name === selectedNode);\n        if (index >= 0) return index;\n        return null;\n    }, [selectedNode, scaledGraph]);\n    return (\n        <>\n            <CameraRig\n                orbit={orbit}\n                targetPosition={\n                    selectedNodeIndex === null\n                        ? scalePoint(\n                              new Vector3(\n                                  (graph.width[0] + graph.width[1]) / 2,\n                                  (graph.height[0] + graph.height[1]) / 2,\n                                  (graph.depth[0] + graph.depth[1]) / 2\n                              ),\n                              graph,\n                              viewport.width,\n                              viewport.height,\n                              scaleFactor\n                          )\n                        : new Vector3(\n                              nodes[selectedNodeIndex].position.x,\n                              nodes[selectedNodeIndex].position.y,\n                              nodes[selectedNodeIndex].position.z\n                          )\n                }\n                distance={selectedNode === null ? 8 : 4.5}\n            />\n            {nodes.map((node, i) => (\n                <Node key={node.name} {...node} />\n            ))}\n        </>\n    );\n};\n","import React, { useCallback, useMemo, useState, useRef, useEffect } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { Graph } from \"./graph/graph\";\nimport { useNgraph } from \"./graph/nlayout-graph\";\nimport { SimNode, SimEdge } from \"./graph/sim-model\";\nimport { DirectionalLight, Vector3, Object3D, DirectionalLightHelper, Mesh } from \"three\";\n// import { MeshNode } from \"./three-utils/text\";\n\ninterface DemoGraphProps {\n    nodes: SimNode[];\n    edges: SimEdge[];\n    pumpProducer: string | null;\n    pumpValue: string[] | null;\n    orbit: boolean;\n}\n\nexport const DemoGraph = ({ pumpProducer, pumpValue, nodes, edges, orbit }: DemoGraphProps) => {\n    const [selectedNode, setNode] = useState<string | null>(null);\n    const [selectedMesh, setMesh] = useState<Mesh | null>(null);\n    const graph = useNgraph(nodes, edges);\n    const onSelectNode = useCallback(\n        ({ name, mesh }: { name: string; mesh: Mesh | null }) => {\n            setNode(name);\n            setMesh(mesh);\n        },\n        [setNode, setMesh]\n    );\n    // const graph = useDag(nodes, edges, \"RL\");\n    const messages = useMemo(() => (pumpValue && pumpProducer && pumpValue.map((v, i) => ({ messageKey: v }))) || [], [\n        pumpValue,\n        pumpProducer\n    ]);\n    const light1 = useRef<DirectionalLight>();\n    const light2 = useRef<DirectionalLight>();\n    const light3 = useRef<DirectionalLight>();\n    const light4 = useRef<DirectionalLight>();\n    const lightHelper1 = useRef<DirectionalLightHelper>();\n    const lightHelper2 = useRef<DirectionalLightHelper>();\n    const lightHelper3 = useRef<DirectionalLightHelper>();\n    const lightHelper4 = useRef<DirectionalLightHelper>();\n\n    useEffect(() => {\n        if (!selectedMesh) {\n            light1.current?.lookAt(new Vector3(0, 0, 0));\n            light2.current?.lookAt(new Vector3(0, 0, 0));\n            light3.current?.lookAt(new Vector3(0, 0, 0));\n            light4.current?.lookAt(new Vector3(0, 0, 0));\n        }\n        if (lightHelper1.current) lightHelper1.current.update();\n        if (lightHelper2.current) lightHelper2.current.update();\n        if (lightHelper3.current) lightHelper3.current.update();\n        if (lightHelper4.current) lightHelper4.current.update();\n        // light1.current?.updateMatrix();\n    }, [selectedMesh, lightHelper1, lightHelper2, lightHelper3, lightHelper4]);\n    const unselect = useCallback(p => setNode(null), [setNode]);\n    return (\n        <Canvas pixelRatio={window.devicePixelRatio} onClickCapture={unselect}>\n            <ambientLight args={[0x0ffffff, 1.9]} />\n            <directionalLight ref={light1} position={[0, 10, 5]} args={[0x0ffaaaa, 0.9]} />\n            {selectedMesh && (\n                <>\n                    <spotLight\n                        ref={light1}\n                        target={selectedMesh || undefined}\n                        intensity={1}\n                        position={[10, 3, 5]}\n                        args={[0x0ffaaaa, 0.9]}\n                    />\n                    <spotLight\n                        ref={light2}\n                        intensity={1}\n                        target={selectedMesh || undefined}\n                        position={[-10, 0, 5]}\n                        args={[0x0aaffaa, 0.9]}\n                    />\n                    <spotLight\n                        ref={light3}\n                        intensity={1}\n                        target={selectedMesh || undefined}\n                        position={[-10, 1, -15]}\n                        args={[0x0aaaaff, 0.7]}\n                    />\n                    <directionalLight\n                        ref={light4}\n                        target={selectedMesh || undefined}\n                        position={[10, 0, -15]}\n                        args={[0x0ffaaff, 0.7]}\n                    />\n                </>\n            )}\n            {/* {light1.current && <directionalLightHelper ref={lightHelper1} args={[light1.current]} />}\n            {light2.current && <directionalLightHelper ref={lightHelper2} args={[light2.current]} />}\n            {light3.current && <directionalLightHelper ref={lightHelper3} args={[light3.current]} />}\n            {light4.current && <directionalLightHelper ref={lightHelper4} args={[light4.current]} />} */}\n            <Graph\n                graph={graph}\n                feed={[{ to: pumpProducer, messages }]}\n                selectedNode={selectedNode}\n                onSelectNode={onSelectNode}\n                orbit={orbit}\n            />\n        </Canvas>\n    );\n};\n","import createGraph from \"ngraph.graph\";\nimport layout3d from \"ngraph.forcelayout3d\";\nimport { useMemo } from \"react\";\nimport { PositionedNode, PositionedEdge, Layout, MinMax } from \"./use-graph-viewport\";\nimport { Vector3 } from \"three\";\nimport { SimEdge, SimNode } from \"./sim-model\";\n\nconst ITERATIONS_COUNT = 100;\n\nexport function useNgraph(nodes: SimNode[], edges: SimEdge[]): Layout {\n    const positioned = useMemo(() => {\n        var graph = createGraph<SimNode, SimEdge>();\n        for (const n of nodes) {\n            graph.addNode(n.name, n);\n        }\n        for (const e of edges) graph.addLink(e.from, e.to, e);\n        const layout = layout3d(graph, { gravity: -30 });\n        for (const n of nodes) {\n            if (n.x !== undefined || n.y !== undefined || n.z !== undefined)\n                layout.setNodePosition(n.name, -10 * (n.x || 10), n.y || Math.random() * 500, n.z || 0);\n        }\n\n        for (let i = 0; i < ITERATIONS_COUNT; ++i) {\n            layout.step();\n        }\n        const retnodes: PositionedNode[] = nodes.map(n => {\n            const { x, y, z } = layout.getNodePosition(n.name);\n            return {\n                name: n.name,\n                width: n.width,\n                height: n.height,\n                depth: n.depth,\n                position: new Vector3(x, y, z)\n            };\n        });\n        const retEdges: PositionedEdge[] = edges.map(e => {\n            const fromPos = layout.getNodePosition(e.from);\n            const toPos = layout.getNodePosition(e.to);\n            const fromNode = graph.getNode(e.from)?.data!;\n            const toNode = graph.getNode(e.to)?.data!;\n\n            const mid = (from: number, to: number, delta: number) => (to - from) * delta + from;\n\n            const connectPoint = (pos: Vector3, output: boolean) => {\n                if (!output) return new Vector3(pos.x - toNode.width / 2, pos.y, pos.z);\n                else return new Vector3(pos.x + fromNode.width / 2, pos.y, pos.z);\n            };\n\n            const midp = new Vector3(\n                mid(fromPos.x, toPos.x, 0.5),\n                mid(fromPos.y, toPos.y, 0.5),\n                mid(fromPos.z, toPos.z, 0.5)\n            );\n            const fromPoint = connectPoint(new Vector3(fromPos.x, fromPos.y, fromPos.z), true);\n            const toPoint = connectPoint(new Vector3(toPos.x, toPos.y, toPos.z), false);\n            const fromHose = new Vector3(\n                fromPoint.x + fromNode.width / 2,\n                mid(fromPoint.y, toPoint.y, 0.1),\n                mid(fromPoint.z, toPoint.z, 0.1)\n            );\n            const toHose = new Vector3(\n                toPoint.x - toNode.width / 2,\n                mid(fromPoint.y, toPoint.y, 0.9),\n                mid(fromPoint.z, toPoint.z, 0.9)\n            );\n            return {\n                from: e.from,\n                to: e.to,\n                points: [fromPoint, fromHose, midp, toHose, toPoint]\n            };\n        });\n        const { x1, x2, y1, y2, z1, z2 } = layout.getGraphRect();\n        return {\n            nodes: retnodes,\n            edges: retEdges,\n            width: [x1, x2] as MinMax,\n            height: [y1, y2] as MinMax,\n            depth: [z1, z2] as MinMax\n        };\n    }, [nodes, edges]);\n    return positioned;\n}\n","import React, { useState, FC, useRef, useCallback } from \"react\";\n\ninterface RecordProps {\n    filename: string;\n}\n\ndeclare global {\n    export interface MediaDevices {\n        getDisplayMedia(x: MediaStreamConstraints): Promise<MediaStream>;\n    }\n}\n\nexport const RecordStream: FC<RecordProps> = ({ filename }) => {\n    const [downloadUrl, setDownloadUrl] = useState<string | null>(null);\n    const [recorder, setRecorder] = useState<MediaRecorder | null>(null);\n    const videoRef = useRef<HTMLVideoElement | null>(null);\n    const onsStart = useCallback(() => {\n        async function doit() {\n            const recData: Blob[] = [];\n            const stream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });\n            videoRef.current!.srcObject = stream;\n            const currRec = new MediaRecorder(stream, { mimeType: 'video/webm;codecs=\"vp8,opus\"' });\n            currRec.ondataavailable = e => recData.push(e.data);\n            currRec.onstop = () => {\n                const blob = new Blob(recData, { type: recData[0].type });\n                setDownloadUrl(URL.createObjectURL(blob));\n            };\n            currRec.start();\n            setRecorder(currRec);\n            return null;\n        }\n        if (videoRef.current) doit();\n    }, [videoRef]);\n    const onStop = useCallback(() => recorder && recorder.stop(), [recorder]);\n    return (\n        <div style={{ padding: 2, backgroundColor: \"#303030\", width: 120 }}>\n            <video style={{ display: \"hidden\", width: 1, height: 1 }} ref={videoRef} />\n            {downloadUrl ? (\n                <a href={downloadUrl} download={filename + \".webm\"}>\n                    Click to Download\n                </a>\n            ) : !recorder ? (\n                <button onClick={onsStart}>Start Recording</button>\n            ) : (\n                <button onClick={onStop}>Stop Recording</button>\n            )}\n        </div>\n    );\n};\n","import React, { useState, useCallback, CSSProperties } from \"react\";\nimport \"./App.css\";\nimport { DemoGraph } from \"./demo-graph\";\nimport { RecordStream } from \"./component/record-stream\";\n\nconst height = 15;\nconst width = 20;\nconst depth = 20;\n\nconst producer1 = \"Producer #1\";\nconst producer2 = \"Producer #2\";\nconst producer3 = \"Producer #3\";\nconst messageQueue = \"Message Queue\";\nconst consumer1 = \"Consumer #1\";\nconst consumer2 = \"Consumer #2\";\nconst consumer3 = \"Consumer #3\";\nconst consumer4 = \"Consumer #4\";\nconst messageQueue2 = \"Out Queue\";\n// const client = \"Client\";\n\nconst commonNode = { width, height, depth };\nconst nodes = [\n    { name: producer1, ...commonNode, x: 100 },\n    { name: producer2, ...commonNode, x: 100 },\n    { name: producer3, ...commonNode, x: 100 },\n    { name: messageQueue, ...commonNode },\n    { name: consumer1, ...commonNode, x: -100 },\n    { name: consumer2, ...commonNode, x: -100 },\n    { name: consumer3, ...commonNode, x: -100 },\n    { name: consumer4, ...commonNode, x: -100 },\n    { name: messageQueue2, ...commonNode, y: -300 }\n];\n\nconst edges = [\n    { from: producer1, to: messageQueue, weight: 2 },\n    { from: producer2, to: messageQueue, weight: 2 },\n    { from: producer3, to: messageQueue, weight: 2 },\n    { from: messageQueue, to: consumer1, weight: 2 },\n    { from: messageQueue, to: consumer2, weight: 2 },\n    { from: messageQueue, to: consumer3, weight: 2 },\n    { from: messageQueue, to: consumer4, weight: 2 },\n    { from: consumer3, to: messageQueue2, weight: 2 }\n];\nconst buttonStyle = {\n    backgroundColor: \"black\",\n    color: \"#bbb\",\n    height: 25,\n    fontWeight: \"bold\",\n    margin: 5\n} as CSSProperties;\n\nconst App: React.FC = () => {\n    const [pump, setPump] = useState<{ id: string; v: string[] } | null>(null);\n    const [orbit, setOrbit] = useState<boolean>(false);\n    const pump1 = useCallback(() => setPump({ id: producer1, v: [\"1X\"] }), [setPump]);\n    const pump2 = useCallback(() => setPump({ id: producer2, v: [\"2X\"] }), [setPump]);\n    const pump3 = useCallback(() => setPump({ id: producer3, v: [\"3X\"] }), [setPump]);\n    const orbitChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>(\n        ({ target }) => {\n            console.log(\"Checked \" + target.checked);\n            setOrbit(target.checked);\n        },\n        [setOrbit]\n    );\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div>DAG 3D Component</div>\n                <button style={buttonStyle} onClick={pump1}>\n                    Pump Producer #1\n                </button>\n                <button style={buttonStyle} onClick={pump2}>\n                    Pump Producer #2\n                </button>\n                <button style={buttonStyle} onClick={pump3}>\n                    Pump Producer #3\n                </button>\n                <label className=\"switch\" style={{ margin: 3 }}>\n                    <input className=\"switch-input\" type=\"checkbox\" checked={orbit} onChange={orbitChange} />\n                    <span className=\"switch-label\" data-on=\"Pan\" data-off=\"Auto\"></span>\n                    <span className=\"switch-handle\"></span>\n                </label>\n                <div>\n                    <RecordStream filename=\"dag3d\" />\n                </div>\n            </header>\n            <DemoGraph\n                pumpProducer={(pump && pump.id) || null}\n                pumpValue={pump && pump.v}\n                nodes={nodes}\n                edges={edges}\n                orbit={orbit}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}