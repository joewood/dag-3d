{"version":3,"sources":["camera-rig.tsx","text.tsx","spin-text.tsx","graph.tsx","demo-graph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CameraRig","pos","targetPosition","camera","useThree","useState","x","y","z","vel","camPos","setCamPos","onFrame","useCallback","state","useFrame","lookAt","Vector3","position","set","useCameraPan","attach","Text","forwardRef","ref","width","height","text","backgroundColor","color","depth","onClick","props","_width","_height","_text","textCanvas","useMemo","canvas","document","createElement","context","getContext","textureWidth","textureHeight","style","top","scale","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","fillText","_onClick","e","args","attachArray","key","image","SpinText","spinX","spinY","useRef","clock","c","current","rotation","getElapsedTime","useAnimatedPath","points","path","n","frac","setFrac","target","i","push","map","getPointAt","Boxes","pt","Graph","graph","viewport","convertGraphX","convertGraphY","convertWidth","convertHeight","selectedNode","selectNode","nodes","onSelect","index","findIndex","f","name","paths","edges","edge","CatmullRomCurve3","point","usePaths","DemoGraph","direction","g","graphlib","directed","setGraph","rankdir","edgesep","marginx","marginy","setDefaultEdgeLabel","node","setNode","label","setEdge","from","to","minlen","layout","retnodes","reduce","p","Math","min","max","useDag","pixelRatio","window","devicePixelRatio","Color","intensity","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cb31721.chunk.js","sourcesContent":["import React, { useCallback, useState, FC } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\nimport { Vector3 } from \"three\"\n\nexport function useCameraPan(targetPosition: Vector3) {\n    const { camera } = useThree();\n    const [camPos, setCamPos] = useState({ pos: { x: 0, y: 0, z: 5 }, vel: { x: 0, y: 0, z: 0 } })\n    const camLookAtZ = -1;\n    const damper = 0.95;\n    const spring = 0.004;\n\n    const onFrame = useCallback(() => {\n        setCamPos(state => ({\n            vel: {\n                x: ((targetPosition.x - state.pos.x) * spring + state.vel.x) * damper,\n                y: ((targetPosition.y - state.pos.y) * spring + state.vel.y) * damper,\n                z: 0//Math.sin(secFraction * 2 * Math.PI) / 500\n            },\n            pos: {\n                x: state.pos.x + state.vel.x,\n                y: state.pos.y + state.vel.y,\n                z: state.pos.z + state.vel.z\n            }\n        }));\n    }, [targetPosition])\n    useFrame(onFrame);\n    camera.lookAt(new Vector3(camPos.pos.x + camPos.vel.x * 3, camPos.pos.y + camPos.vel.y * 3, camLookAtZ))\n    camera.position.set(camPos.pos.x, camPos.pos.y, camPos.pos.z)\n    return [camPos.pos.x, camPos.pos.y, camPos.pos.z];\n}\n\nexport function useSelectedNode(points: any[]) {\n    const [index, setIndex] = useState(0);\n    const cb = useCallback(({ clock }: any) => {\n        const time = clock.getElapsedTime() / 2\n        const index = Math.floor(time) % points.length;\n        setIndex(index);\n    }, [points])\n    useFrame(cb);\n    return index;\n}\n\nexport const CameraRig: FC<{ targetPosition: Vector3 }> = ({ targetPosition }) => {\n    const pos = useCameraPan(targetPosition);\n    return <camera attach=\"camera\" position={pos} />\n}\n","import React, { forwardRef, Ref, useCallback, useMemo } from 'react';\nimport { ReactThreeFiber } from 'react-three-fiber';\nimport { Mesh } from 'three';\n\nexport type MeshProps = ReactThreeFiber.Object3DNode<Mesh, typeof Mesh>;\n\nexport interface TextProps {\n    width?: number;\n    height?: number;\n    text: string;\n    depth?: number;\n    backgroundColor?: string;\n    color?: string;\n    position: number[];\n    onClick: (args: { text: string }) => void;\n}\n\n\nexport const Text = forwardRef(({ width, height, text, backgroundColor, color, depth, onClick, ...props }: TextProps, ref: Ref<MeshProps>) => {\n    const _width = width || 1\n    const _height = height || 0.3\n    const _text = text || '<null>'\n    const textCanvas = useMemo(() => {\n        const canvas = document.createElement('canvas')\n        const context = canvas.getContext('2d')\n        if (!context) return null;\n        const textureWidth = _width * 20;\n        const textureHeight = _height * 20;\n        canvas.style.position = 'absolute'\n        canvas.style.top = `calc(50% - ${textureHeight / 2}px)`\n        canvas.style.width = textureWidth + 'px'\n        canvas.style.height = textureHeight + 'px'\n        canvas.width = textureWidth * 20\n        canvas.height = textureHeight * 20\n        context.scale(20, 20)\n        context.fillStyle = backgroundColor || 'grey'\n        context.fillRect(0, 0, textureWidth, textureHeight)\n        const fontSize = textureHeight / 1.8;\n        context.font = `bold ${fontSize}px Arial, sans-serif`\n        context.fillStyle = color || 'white'\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        const x = textureWidth / 2\n        const y = textureHeight / 2\n        context.fillText(_text, x, y)\n        return canvas\n    }, [_width, _height, color, backgroundColor, _text])\n    const _onClick = useCallback((e: any) => {\n        onClick({ text })\n    }, [text, onClick])\n\n    // const { viewport } = useThree()\n    return (\n        <mesh ref={ref} onClick={_onClick} {...props}>\n            <boxBufferGeometry args={[_width, _height, depth || 0.06]} attach=\"geometry\" />\n            <meshStandardMaterial attachArray=\"material\" color={backgroundColor} />\n            <meshStandardMaterial attachArray=\"material\" color={backgroundColor} />\n            <meshStandardMaterial attachArray=\"material\" color={backgroundColor} />\n            <meshStandardMaterial attachArray=\"material\" color={backgroundColor} />\n\n            <meshStandardMaterial key=\"front\" attachArray=\"material\">\n                <canvasTexture attach=\"map\" image={textCanvas} />\n            </meshStandardMaterial>\n            <meshStandardMaterial key=\"back\" attachArray=\"material\">\n                <canvasTexture attach=\"map\" image={textCanvas} />\n            </meshStandardMaterial>\n        </mesh>\n    )\n})\n\n","import React, { FC, Ref, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { Euler } from 'three'\nimport { MeshProps, Text, TextProps } from \"./text\"\n\ninterface SpinProps extends TextProps {\n    spinX?: number;\n    spinY?: number;\n}\nexport const SpinText: FC<SpinProps> = ({ spinX, spinY, ...props }) => {\n    const ref: Ref<MeshProps> = useRef<MeshProps>(null)\n    useFrame(({ clock }) => {\n        const c = ref.current;\n        if (!!c) {\n            const r = c.rotation as Euler;\n            r.set(clock.getElapsedTime() * (spinX || 0.0), clock.getElapsedTime() * (spinY || 0.0), 0);\n        }\n    })\n    return <Text ref={ref} {...props} />\n}\n","import { graphlib, layout } from \"dagre\"\nimport React, { FC, useCallback, useMemo, useState } from 'react'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport { CatmullRomCurve3, Vector3, Sphere, SphereGeometry } from \"three\"\nimport { CameraRig } from \"./camera-rig\"\nimport { SpinText } from \"./spin-text\"\n\n\nfunction useRange(n: number) {\n\treturn useMemo(() => {\n\t\tconst target: number[] = []\n\t\tfor (let i = 0; i < n; i++) target.push(i);\n\t\treturn target;\n\t}, [n]);\n}\n\ninterface Node {\n\tname: string;\n\twidth: number;\n\theight: number;\n}\n\ninterface Edge {\n\tfrom: string;\n\tto: string;\n}\n\ninterface PositionedNode {\n\tname: string;\n\twidth: number;\n\theight: number;\n\tx: number;\n\ty: number;\n}\n\ninterface PositionedEdge {\n\tname?: string;\n\tpoints: { x: number, y: number }[]\n}\n\ninterface Layout {\n\tnodes: PositionedNode[];\n\tedges: PositionedEdge[];\n\twidth: [number, number];\n\theight: [number, number];\n}\n\nexport function useDag(nodes: Node[], edges: Edge[], direction = \"LR\"): Layout {\n\treturn useMemo(() => {\n\t\tconst g = new graphlib.Graph({ directed: true });\n\t\tg.setGraph({ rankdir: direction, edgesep: 2, marginx: 20, marginy: 20 });\n\t\tg.setDefaultEdgeLabel(() => { return {} });\n\t\tfor (const node of nodes) {\n\t\t\tg.setNode(node.name, { label: node.name, width: node.width, height: node.height });\n\t\t}\n\t\tfor (const edge of edges) {\n\t\t\tg.setEdge(edge.from, edge.to, { minlen: 1 });\n\t\t}\n\t\tlayout(g);\n\t\tconst retnodes = g.nodes().map(n => ({ name: n, width: g.node(n).width, height: g.node(n).height, x: g.node(n).x, y: g.node(n).y }));\n\t\tconst width = retnodes.reduce((p, c) => [Math.min(c.x, p[0]), Math.max(c.x + c.width, p[1])], [0, 0]) as [number, number]\n\t\tconst height = retnodes.reduce((p, c) => [Math.min(c.y, p[0]), Math.max(c.y + c.height, p[1])], [0, 0]) as [number, number]\n\t\tconst retedges = g.edges().map(e => ({ points: g.edge(e).points }));\n\t\treturn { nodes: retnodes, width, height, edges: retedges }\n\t}, [nodes, edges, direction])\n}\n\n// extend({ OrbitControls })\n\n// function Controls() {\n// \tconst controls = useRef() as any //Ref<ReactThreeFiber.Object3DNode<OrbitControls,typeof OrbitControls>>\n// \tconst { camera, gl } = useThree()\n// \tuseFrame(() => controls && controls.current && controls.current.update())\n// \treturn (\n// \t\t<orbitControls ref={controls} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n// \t)\n// }\n\n\ninterface GraphProps {\n\tgraph: Layout;\n}\n\nfunction usePaths(edges: PositionedEdge[], convertGraphX: (x: number) => number, convertGraphY: (y: number) => number) {\n\tconst paths = useMemo(() => {\n\t\treturn edges.map(edge => new CatmullRomCurve3(edge.points.map(point => new Vector3(convertGraphX(point.x), convertGraphY(point.y), -0.1)), false, \"catmullrom\"))\n\t}, [edges, convertGraphX, convertGraphY])\n\treturn paths;\n}\n\ninterface BoxesProps {\n\tpath: CatmullRomCurve3;\n\tpoints: number;\n}\n\nfunction useAnimatedPath(points: number, path: CatmullRomCurve3) {\n\tconst [frac, setFrac] = useState(0)\n\tuseFrame(({ clock }) => setFrac(((clock.getElapsedTime() * 300) % 1000) / 1000))\n\treturn useRange(points).map(i => {\n\t\treturn path.getPointAt(((i / points + frac) * 1000 % 1000) / 1000)\n\t})\n\n}\n\nconst Boxes: FC<BoxesProps> = ({ path, points }) => {\n\treturn <>\n\t\t{useAnimatedPath(points, path).map((pt, i) => {\n\t\t\treturn <mesh key={i} position={pt}>\n\t\t\t\t<sphereGeometry attach=\"geometry\" args={[0.07]} />\n\t\t\t\t<meshPhongMaterial attach=\"material\" color=\"#6060a0\" />\n\t\t\t</mesh>\n\t\t})\n\t\t}\n\t</>\n}\n\nexport const Graph: FC<GraphProps> = ({ graph }) => {\n\tconst { viewport } = useThree();\n\tconst convertGraphX = useCallback((x: number) => (x - graph.width[0]) * (viewport.width) / (graph.width[1] - graph.width[0]) - viewport.width / 2, [viewport, graph])\n\tconst convertGraphY = useCallback((y: number) => (y - graph.height[0]) * (viewport.height) / (graph.height[1] - graph.height[0]) - viewport.height / 2, [graph, viewport])\n\tconst convertWidth = useCallback((width: number) => width * viewport.width / (graph.width[1] - graph.width[0]), [viewport, graph])\n\tconst convertHeight = useCallback((height: number) => height * viewport.height / (graph.height[1] - graph.height[0]), [viewport, graph])\n\tconst [selectedNode, selectNode] = useState(0)\n\tconst points = useMemo(() => {\n\t\treturn graph.nodes.map(n => new Vector3(convertGraphX(n.x), convertGraphY(n.y), -0.1))\n\t}, [graph, convertGraphX, convertGraphY])\n\tconst onSelect = useCallback(({ text }: { text: string }) => {\n\t\tconst index = graph.nodes.findIndex(f => f.name === text);\n\t\tif (index >= 0) selectNode(index);\n\t}, [graph, selectNode])\n\tconst paths = usePaths(graph.edges, convertGraphX, convertGraphY)\n\treturn <>\n\t\t<CameraRig targetPosition={points[selectedNode]} />\n\t\t{\n\t\t\tgraph.nodes.map((n, i) => (<SpinText\n\t\t\t\tkey={n.name}\n\t\t\t\tonClick={onSelect}\n\t\t\t\ttext={n.name}\n\t\t\t\tspinX={n.name === \"Client\" || n.name === \"Config\" ? 0.6 : 0}\n\t\t\t\tcolor={i === selectedNode ? \"black\" : \"white\"}\n\t\t\t\twidth={convertWidth(n.width)}\n\t\t\t\theight={convertHeight(n.height)}\n\t\t\t\tbackgroundColor=\"#4070f0\"\n\t\t\t\tdepth={0.3}\n\t\t\t\tposition={[convertGraphX(n.x), convertGraphY(n.y), -0.1]} />))\n\t\t}\n\t\t{paths.map((path, i) => {\n\t\t\treturn (<mesh key={\"mesh\" + i}>\n\t\t\t\t<tubeGeometry\n\t\t\t\t\tattach=\"geometry\"\n\t\t\t\t\targs={[path, 30, 0.03, 8, false]}\n\t\t\t\t/>\n\t\t\t\t<meshPhongMaterial attach=\"material\" color=\"#606010\" />\n\t\t\t</mesh>);\n\t\t})}\n\t\t{paths.map((path, i) => (<Boxes path={path} points={3} />))}\n\t</>\n\n}\n\n\n","import React from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { Color } from \"three\"\nimport { Graph, useDag } from \"./graph\"\n\nexport const DemoGraph = () => {\n    const height = 8;\n    const width = 60;\n    const vwapEngine = \"VWAP Engine\"\n    const oms = \"OMS\"\n    const market = \"Exch Links\"\n    const trading = \"Trading Sys\"\n    const prices = \"MD Sys\"\n    const client = \"Client\"\n    const clientSys = \"Client Int\"\n    const graph = useDag([\n        { name: \"Config\", width, height },\n        { name: \"Ref Data Svc\", width, height },\n        { name: \"EOD Prices\", width, height },\n        { name: prices, width, height },\n        { name: client, width, height },\n        { name: clientSys, width, height },\n        { name: vwapEngine, width, height },\n        { name: oms, width, height },\n        { name: market, width, height },\n        { name: trading, width, height }\n    ], [\n        { from: \"Config\", to: vwapEngine },\n        { from: client, to: clientSys },\n        { from: clientSys, to: oms },\n        { from: \"Ref Data Svc\", to: vwapEngine },\n        { from: prices, to: vwapEngine },\n        { from: \"EOD Prices\", to: vwapEngine },\n        { from: vwapEngine, to: oms },\n        { from: oms, to: market },\n        { from: market, to: trading },\n        { from: trading, to: clientSys }\n    ],\n        \"RL\");\n    return (\n        <Canvas pixelRatio={window.devicePixelRatio}>\n            <ambientLight />\n            <spotLight position={[-7, 1, 3]} color={new Color(\"#fff\")} intensity={0.8} rotation={[-0.2, 1.2, 0]} />\n            <spotLight position={[0, -5, 3]} color={new Color(\"#fff\")} intensity={0.8} rotation={[1.2, 0, 0]} />\n            <Graph graph={graph} />\n        </Canvas>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport { DemoGraph } from \"./demo-graph\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        DAG 3D Component\n      </header>\n      <DemoGraph />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}