{"version":3,"sources":["component/use-spring-3d.ts","component/camera-rig.tsx","component/messages.tsx","component/edge.tsx","component/text.tsx","component/spin-text.tsx","component/node.tsx","component/use-graph-viewport.ts","component/graph.tsx","demo-graph.tsx","component/dagre-graph.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useVel","initial","target","damper","spring","useState","pos","x","y","z","vel","state","set","onFrame","useCallback","useFrame","Vector3","CameraRig","targetPosition","camera","useThree","camPos","camLookAt","lookAt","position","useCameraPan","attach","Messages","prefix","curve","elapsed","messages","duration","animPoints","useMemo","map","message","key","messageKey","pt","getPointAt","Math","max","min","frame","point","i","args","color","Edge","fromNode","toNode","points","onEgress","_onEgress","elapsedMs","setElapsedMs","clock","elapsedTime","messagesBuffered","messagePump","undefined","setMessages","useEffect","length","msg","unexpiredMessages","m","filter","expiredMessages","emptyArray","keyed","keyBy","useTrackMessages","CatmullRomCurve3","usePath","name","stepFunction","v","neg","abs","generateTopUV","geometry","vertices","indexA","indexB","indexC","rear","a_x","a_y","b_x","b_y","c_x","c_y","Vector2","generateSideWallUV","indexD","depth","options","curves","shapes","mX","reduce","p","c","v1","v2","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","mY","mZ","ofMax","a_z","b_z","c_z","d_y","d_z","right","Text","forwardRef","ref","width","height","text","backgroundColor","onClick","props","_width","_height","_text","shape","__shape","Shape","moveTo","lineTo","extrudeSettings","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","UVGenerator","textCanvas","canvas","document","createElement","context","getContext","textureWidth","textureHeight","style","top","scale","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","fillText","_onClick","e","roughness","metalness","attachArray","image","defaultProps","SpinText","spinX","spinY","useRef","current","rotation","getElapsedTime","Node","onSelect","edges","_onSelect","setElpased","floor","useCheckMessages","edgeProps","edge","scaleToFit","sourceRange","targetRange","scaleToFit3","scaleRangeToFit","r","Graph","graph","onSelectNode","selectedNode","feed","to","messageState","setMessageState","scaledGraph","viewport","nodes","n","from","useGraphViewPort","edgesPerNode","groupBy","node","selectedNodeIndex","index","findIndex","f","oms","trading","weight","DemoGraph","setNode","g","graphlib","directed","setGraph","edgesep","nodesep","marginx","marginy","rankdir","setDefaultEdgeLabel","label","setEdge","minlen","layout","retnodes","retedges","w","useDag","unselect","pixelRatio","window","devicePixelRatio","onClickCapture","Color","intensity","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74afe90f.chunk.js","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Vector3 } from \"three\";\n\ninterface UseVelConfig {\n    damper?: number;\n    spring?: number;\n}\n\nexport function useVel(initial: Vector3, target: Vector3, { damper = 0.72, spring = 0.003 }: UseVelConfig) {\n    const [state, set] = useState({ pos: { x: initial.x, y: initial.y, z: initial.z }, vel: { x: 0, y: 0, z: 0 } });\n    const onFrame = useCallback(() => {\n        set(state => ({\n            vel: {\n                x: ((target.x - state.pos.x) * spring + state.vel.x) * damper,\n                y: ((target.y - state.pos.y) * spring + state.vel.y) * damper,\n                z: ((target.z - state.pos.z) * spring + state.vel.z) * damper\n            },\n            pos: {\n                x: state.pos.x + state.vel.x,\n                y: state.pos.y + state.vel.y,\n                z: state.pos.z + state.vel.z\n            }\n        }));\n    }, [target.x, target.y, target.z, damper, spring]);\n    useFrame(onFrame);\n    return new Vector3(state.pos.x, state.pos.y, state.pos.z);\n}\n","import React, { useCallback, useState, FC, useEffect } from 'react'\nimport { useFrame, useThree, stateContext } from 'react-three-fiber'\nimport { Vector3 } from \"three\"\nimport { useVel } from \"./use-spring-3d\"\n\nexport function useCameraPan(targetPosition: Vector3) {\n    const { camera } = useThree();\n    const camPos = useVel(new Vector3(0, 0, 10), targetPosition, { spring: 0.006, damper: 0.9 });\n    const camLookAt = useVel(new Vector3(0, 0, 0), new Vector3(targetPosition.x, targetPosition.y, targetPosition.z - 6), { spring: 0.01, damper: 0.85 })\n    camera.lookAt(camLookAt)\n    camera.position.set(camPos.x, camPos.y, camPos.z)\n    return [camPos.x, camPos.y, camPos.z];\n}\n\nexport function useSelectedNode(points: any[]) {\n    const [index, setIndex] = useState(0);\n    const cb = useCallback(({ clock }: any) => {\n        const time = clock.getElapsedTime() / 2\n        const index = Math.floor(time) % points.length;\n        setIndex(index);\n    }, [points])\n    useFrame(cb);\n    return index;\n}\n\nexport const CameraRig: FC<{ targetPosition: Vector3 }> = ({ targetPosition }) => {\n    const pos = useCameraPan(new Vector3(targetPosition.x, targetPosition.y, targetPosition.z + 4));\n    return <camera attach=\"camera\" position={pos} />\n}\n","import React, { FC, useMemo } from \"react\";\nimport { CatmullRomCurve3 } from \"three\";\n\nexport interface MessageProps {\n    messageKey: string;\n    value?: number;\n    content?: string;\n}\n\nexport interface MessageArrived extends MessageProps {\n    frame: number;\n}\n\ninterface BoxesProps {\n    curve: CatmullRomCurve3;\n    messages: MessageArrived[] | undefined;\n    duration: number;\n    elapsed: number;\n    prefix: string;\n}\n\nexport const Messages: FC<BoxesProps> = ({ prefix, curve, elapsed, messages, duration }) => {\n    const animPoints = useMemo(() => {\n        return (messages || []).map(message => {\n            return {\n                key: message.messageKey,\n                pt: curve.getPointAt(Math.max(0, Math.min(1, (elapsed - message.frame) / duration)))\n            };\n        });\n    }, [elapsed, messages, curve, duration]);\n\n    return (\n        <>\n            {animPoints.map((point, i) => {\n                return (\n                    <mesh key={prefix + i} position={point.pt}>\n                        <sphereGeometry attach=\"geometry\" args={[0.076]} />\n                        <meshPhongMaterial attach=\"material\" color=\"#4070f0\" />\n                    </mesh>\n                );\n            })}\n        </>\n    );\n};\n","import { keyBy } from \"lodash\";\nimport React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport { CatmullRomCurve3, Vector3 } from \"three\";\nimport { MessageArrived, Messages } from \"./messages\";\nimport { NodeProps, NodeType } from \"./node\";\n\nexport function usePath(points: Vector3[]) {\n    return useMemo(() => {\n        return new CatmullRomCurve3(points, false, \"catmullrom\");\n    }, [points]);\n}\n\nfunction useTrackMessages(\n    messagePump: MessageArrived[] | undefined,\n    duration: number,\n    elapsedTime: number,\n    onEgress: (messages: MessageArrived[]) => void\n) {\n    const [messages, setMessages] = useState<MessageArrived[] | undefined>(undefined);\n    useEffect(() => {\n        if (!messagePump || messagePump.length === 0) return;\n        // console.log(\"New messages: \" + JSON.stringify(messagePump));\n        setMessages(msg => [...(msg || []), ...messagePump]);\n    }, [messagePump, duration]);\n    const unexpiredMessages = useMemo<MessageArrived[]>(() => {\n        if (!messages || messages.length === 0) return [];\n        const m = messages[0];\n        if (elapsedTime >= m.frame + duration) {\n            return messages.filter(m => elapsedTime < m.frame + duration);\n        } else {\n            return messages;\n        }\n    }, [messages, duration, elapsedTime]);\n\n    const expiredMessages = useMemo(() => {\n        const emptyArray: MessageArrived[] = [];\n        if (!messages || messages.length === 0) {\n            return emptyArray;\n        }\n        const m = messages[0];\n        if (elapsedTime >= m.frame + duration) {\n            // console.log(\"Filtering \");\n            return messages.filter(m => elapsedTime >= m.frame + duration);\n        } else return emptyArray;\n    }, [messages, duration, elapsedTime]);\n\n    useEffect(() => {\n        if (!expiredMessages || expiredMessages.length === 0) return;\n        const keyed = keyBy(expiredMessages, m => m.messageKey);\n        setMessages(msg => (msg || []).filter(m => !keyed[m.messageKey]));\n    }, [expiredMessages]);\n\n    useEffect(() => {\n        // console.log({ elapsedTime });\n        if (!expiredMessages || expiredMessages.length === 0) return;\n        // console.log(\"Time to delete: \" + expiredMessages.length + \" \" + messages?.length);\n        onEgress(expiredMessages);\n    }, [duration, expiredMessages, onEgress]);\n    return unexpiredMessages;\n}\n\nexport interface EdgeProps extends Pick<NodeProps, \"onEgress\"> {\n    points: Vector3[];\n    duration: number;\n    fromNode: NodeType;\n    toNode: NodeType;\n    elapsed: number;\n    messages?: MessageArrived[];\n}\n\nexport const Edge: FC<EdgeProps> = ({ fromNode, toNode, messages, points, duration, elapsed, onEgress }) => {\n    const _onEgress = useCallback((messages: MessageArrived[]) => onEgress(fromNode, toNode, messages), [\n        fromNode,\n        toNode,\n        onEgress\n    ]);\n    const [elapsedMs, setElapsedMs] = useState(0);\n    useFrame(({ clock }) => {\n        setElapsedMs(clock.elapsedTime);\n    });\n\n    const messagesBuffered = useTrackMessages(messages, duration, elapsed, _onEgress);\n    const curve = usePath(points);\n    return (\n        <>\n            <mesh key={`${fromNode.name}-${toNode.name}-edge`}>\n                <tubeGeometry attach=\"geometry\" args={[curve, 30, 0.03, 8, false]} />\n                <meshPhongMaterial attach=\"material\" color=\"#333\" />\n            </mesh>\n            <Messages\n                key={`${fromNode.name}-${toNode.name}-messages`}\n                elapsed={elapsedMs}\n                prefix={`${fromNode.name}-${toNode.name}-messages`}\n                curve={curve}\n                duration={duration}\n                messages={messagesBuffered}\n            />\n        </>\n    );\n};\n","import React, { forwardRef, Ref, useCallback, useMemo } from \"react\";\nimport { ReactThreeFiber } from \"react-three-fiber\";\nimport { ExtrudeBufferGeometry, ExtrudeGeometryOptions, LineCurve3, Mesh, Shape, Vector2, Vector3 } from \"three\";\n\nexport type MeshProps = ReactThreeFiber.Object3DNode<Mesh, typeof Mesh>;\n\nexport interface TextProps {\n    width: number;\n    height: number;\n    text: string;\n    depth: number;\n    backgroundColor?: string;\n    color?: string;\n    position: Vector3;\n    onClick: (args: { text: string }) => void;\n}\n\nconst stepFunction = (v: number, neg = false) => (neg ? 1 - (v / Math.abs(v) + 1) / 2 : (v / Math.abs(v) + 1) / 2);\n\nconst generateTopUV = (\n    geometry: ExtrudeBufferGeometry,\n    vertices: number[],\n    indexA: number,\n    indexB: number,\n    indexC: number\n) => {\n    const rear = vertices[indexA * 3 + 2] < 0;\n    var a_x = stepFunction(vertices[indexA * 3], rear);\n    var a_y = stepFunction(vertices[indexA * 3 + 1], false);\n    var b_x = stepFunction(vertices[indexB * 3], rear);\n    var b_y = stepFunction(vertices[indexB * 3 + 1], false);\n    var c_x = stepFunction(vertices[indexC * 3], rear);\n    var c_y = stepFunction(vertices[indexC * 3 + 1], false);\n    return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n};\n\nconst generateSideWallUV = (\n    geometry: ExtrudeBufferGeometry,\n    vertices: number[],\n    indexA: number,\n    indexB: number,\n    indexC: number,\n    indexD: number\n) => {\n    const depth = (geometry as any)[\"parameters\"].options.depth;\n    const curves = (geometry as any)[\"parameters\"].shapes.curves as LineCurve3[];\n    const mX = curves.reduce(\n        (p, c) => [Math.min(p[0], c.v1.x, c.v2.x), Math.max(p[1], c.v1.x, c.v2.x)] as [number, number],\n        [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER] as [number, number]\n    );\n    const mY = curves.reduce(\n        (p, c) => [Math.min(p[0], c.v1.y, c.v2.y), Math.max(p[1], c.v1.y, c.v2.y)] as [number, number],\n        [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER] as [number, number]\n    );\n    const mZ = [0, depth] as [number, number];\n    const ofMax = (v: number, max: [number, number]) => (v - max[0]) / (max[1] - max[0]);\n    var a_x = ofMax(vertices[indexA * 3], mX);\n    var a_y = ofMax(vertices[indexA * 3 + 1], mY);\n    var a_z = ofMax(vertices[indexA * 3 + 2], mZ);\n    var b_x = ofMax(vertices[indexB * 3], mX);\n    var b_y = ofMax(vertices[indexB * 3 + 1], mY);\n    var b_z = ofMax(vertices[indexB * 3 + 2], mZ);\n    var c_x = ofMax(vertices[indexC * 3], mX);\n    var c_y = ofMax(vertices[indexC * 3 + 1], mY);\n    var c_z = ofMax(vertices[indexC * 3 + 2], mZ);\n    var d_x = ofMax(vertices[indexD * 3], mX);\n    var d_y = ofMax(vertices[indexD * 3 + 1], mY);\n    var d_z = ofMax(vertices[indexD * 3 + 2], mZ);\n\n    // if it's left or right side then x will not vary\n    if (Math.abs(a_x - b_x) < 0.01) {\n        const right = (x: number) => (a_x > 0.5 ? 1 - x : x);\n        return [\n            new Vector2(right(a_z), a_y),\n            new Vector2(right(b_z), b_y),\n            new Vector2(right(c_z), c_y),\n            new Vector2(right(d_z), d_y)\n        ];\n    } else {\n        return [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\n    }\n};\n\nexport const Text = forwardRef(\n    (\n        { width, height, text, backgroundColor, color, depth, onClick, position, ...props }: TextProps,\n        ref: Ref<MeshProps>\n    ) => {\n        const _width = width;\n        const _height = height;\n        const _text = text;\n\n        const shape = useMemo(() => {\n            const __shape = new Shape();\n            __shape.moveTo((_width / 2) * -1, (_height / 2) * -1);\n            __shape.lineTo(_width / 2, (_height / 2) * -1);\n            __shape.lineTo(_width / 2, _height / 2);\n            __shape.lineTo((_width / 2) * -1, _height / 2);\n            __shape.lineTo((_width / 2) * -1, (_height / 2) * -1);\n            return __shape;\n        }, [_width, _height]);\n\n        const extrudeSettings = useMemo<ExtrudeGeometryOptions>(\n            () => ({\n                steps: 2,\n                depth: depth,\n                bevelEnabled: true,\n                bevelThickness: 0.03,\n                bevelSize: 0.02,\n                bevelOffset: 0.0,\n                bevelSegments: 5,\n                UVGenerator: { generateTopUV, generateSideWallUV }\n            }),\n            [depth]\n        );\n\n        const textCanvas = useMemo(() => {\n            const canvas = document.createElement(\"canvas\");\n            const context = canvas.getContext(\"2d\");\n            if (!context) return null;\n            const textureWidth = _width * 20;\n            const textureHeight = _height * 20;\n            canvas.style.position = \"absolute\";\n            canvas.style.top = `calc(50% - ${textureHeight / 2}px)`;\n            canvas.style.width = textureWidth + \"px\";\n            canvas.style.height = textureHeight + \"px\";\n            canvas.width = textureWidth * 20;\n            canvas.height = textureHeight * 20;\n            context.scale(20, 20);\n            context.fillStyle = backgroundColor || \"grey\";\n\n            context.fillRect(0, 0, textureWidth, textureHeight);\n            const fontSize = textureHeight / 1.8;\n            context.font = `bold ${fontSize}px Arial, sans-serif`;\n            context.fillStyle = color || \"white\";\n            context.textAlign = \"center\";\n            context.textBaseline = \"middle\";\n            const x = textureWidth / 2;\n            const y = textureHeight / 2;\n            context.fillText(_text, x, y);\n            return canvas;\n        }, [_width, _height, color, backgroundColor, _text]);\n        const _onClick = useCallback(\n            (e: any) => {\n                onClick({ text });\n            },\n            [text, onClick]\n        );\n        return (\n            <mesh ref={ref} onClick={_onClick} position={position} {...props}>\n                <boxBufferGeometry args={[_width, _height, depth]} attach=\"geometry\" />\n                <extrudeGeometry attach=\"geometry\" args={[shape, extrudeSettings]} />\n                <meshStandardMaterial roughness={0.2} metalness={0.8} attachArray=\"material\">\n                    <canvasTexture attach=\"map\" image={textCanvas} />\n                </meshStandardMaterial>\n                <meshStandardMaterial roughness={0.2} metalness={0.8} attachArray=\"material\">\n                    <canvasTexture attach=\"map\" image={textCanvas} />\n                </meshStandardMaterial>\n            </mesh>\n        );\n    }\n);\n\nText.defaultProps = { depth: 0.04, width: 1, height: 0.3, text: \"<null>\" };\n","import React, { FC, Ref, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { Euler } from 'three'\nimport { MeshProps, Text, TextProps } from \"./text\"\n\ninterface SpinProps extends TextProps {\n    spinX?: number;\n    spinY?: number;\n}\nexport const SpinText: FC<SpinProps> = ({ spinX, spinY, ...props }) => {\n    const ref: Ref<MeshProps> = useRef<MeshProps>(null)\n    useFrame(({ clock }) => {\n        const c = ref.current;\n        if (!!c) {\n            const r = c.rotation as Euler;\n            r.set(clock.getElapsedTime() * (spinX || 0.0), clock.getElapsedTime() * (spinY || -0.0), 0);\n        }\n    })\n    return <Text ref={ref} {...props} />\n}\n","import React, { FC, useCallback, useMemo, useState } from \"react\";\nimport { Vector3 } from \"three\";\nimport { Edge, EdgeProps } from \"./edge\";\nimport { MessageProps, MessageArrived } from \"./messages\";\nimport { SpinText } from \"./spin-text\";\nimport { useFrame } from \"react-three-fiber\";\n\nexport type NodeEdgeType = Pick<EdgeProps, \"duration\" | \"messages\" | \"points\" | \"toNode\">;\nexport type NodeType = Pick<NodeProps, \"name\">;\nexport type MessageType = Pick<MessageProps, \"messageKey\">;\n\nexport interface NodeEdge {\n    to: string;\n    points: Vector3;\n}\n\nexport interface NodeProps {\n    position: Vector3;\n    width: number;\n    height: number;\n    depth: number;\n    name: string;\n    edges: NodeEdgeType[];\n    messages: MessageArrived[] | undefined;\n    onEgress: (fromNode: NodeType, toNode: NodeType, messages: MessageArrived[]) => void;\n    onSelect: (args: NodeType) => void;\n}\n\nfunction useCheckMessages(messages: MessageType[] | undefined) {\n    const [elapsedTime, setElpased] = useState(0);\n    useFrame(({ clock }) => {\n        setElpased(Math.floor(clock.elapsedTime * 100) / 100);\n    });\n    return elapsedTime;\n}\n\nexport const Node: FC<NodeProps> = ({ name, onSelect, width, height, position, messages, edges, onEgress }) => {\n    const _onSelect = useCallback(({ text }: { text: string }) => onSelect({ name: text }), [onSelect]);\n    const elapsed = useCheckMessages(messages);\n    const edgeProps = useMemo<EdgeProps[]>(\n        () =>\n            edges.map(edge => ({\n                ...edge,\n                fromNode: { name },\n                messages,\n                elapsed,\n                onEgress\n            })),\n        [edges, name, elapsed, messages, onEgress]\n    );\n    return (\n        <>\n            <SpinText\n                key={name}\n                onClick={_onSelect}\n                text={name}\n                spinY={0.0}\n                color={\"#202020\"}\n                width={width}\n                height={height}\n                backgroundColor=\"#a0a0ff\"\n                depth={width}\n                position={position}\n            />\n            {edgeProps.map((edge, i) => (\n                <Edge key={i} {...edge} />\n            ))}\n        </>\n    );\n};\n","import { groupBy } from \"lodash\";\nimport { useMemo } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { CatmullRomCurve3, Vector3 } from \"three\";\n\nexport interface PositionedNode {\n    name: string;\n    width?: number;\n    height?: number;\n    depth?: number;\n    position: Vector3;\n}\n\nexport interface PositionedEdge {\n    name?: string;\n    messages?: number;\n    from: string;\n    to: string;\n    points: Vector3[];\n}\n\nexport type MinMax = [number, number];\n\nexport interface Layout {\n    nodes: PositionedNode[];\n    edges: PositionedEdge[];\n    width: MinMax;\n    height: MinMax;\n    depth: MinMax;\n}\n\nexport function usePath(edges: PositionedEdge[]) {\n    const paths = useMemo(() => {\n        const edgeCurves = edges.map(edge => ({\n            edge,\n            curve: new CatmullRomCurve3(edge.points, false, \"catmullrom\")\n        }));\n        return groupBy(edgeCurves, e => `${e.edge.from}**${e.edge.to}`);\n    }, [edges]);\n    return paths;\n}\n\nfunction scaleToFit(p: number, sourceRange: MinMax, targetRange: number) {\n    return ((p - sourceRange[0]) * targetRange) / (sourceRange[1] - sourceRange[0]) - targetRange / 2;\n}\n\nfunction scaleToFit3(\n    p: Vector3,\n    sourceRange: { x: MinMax; y: MinMax; z: MinMax },\n    targetRange: { x: number; y: number; z: number }\n) {\n    return new Vector3(\n        scaleToFit(p.x, sourceRange.x, targetRange.x),\n        scaleToFit(p.y, sourceRange.y, targetRange.y),\n        scaleToFit(p.z, sourceRange.z, targetRange.z)\n    );\n}\n\nfunction scaleRangeToFit(r: number, sourceRange: [number, number], targetRange: number) {\n    return (r * targetRange) / (sourceRange[1] - sourceRange[0]);\n}\n\nexport function useGraphViewPort(graph: Layout): Layout {\n    const { viewport } = useThree();\n    const viewPortDepth = 5;\n    return useMemo<Layout>(() => {\n        const nodes = graph.nodes.map<PositionedNode>(n => ({\n            name: n.name,\n            position: scaleToFit3(\n                n.position,\n                {\n                    x: graph.width,\n                    y: graph.height,\n                    z: [0, viewPortDepth]\n                },\n                {\n                    x: viewport.width,\n                    y: viewport.height,\n                    z: viewPortDepth\n                }\n            ),\n            width: scaleRangeToFit(n.width || 10, graph.width, viewport.width),\n            height: scaleRangeToFit(n.height || 10, graph.height, viewport.height),\n            depth: scaleRangeToFit(n.width || 10, graph.width, viewPortDepth)\n        }));\n        const edges = graph.edges.map<PositionedEdge>(({ points, from, to }) => ({\n            from: from,\n            to: to,\n            points: points.map(p =>\n                scaleToFit3(\n                    p,\n                    {\n                        x: graph.width,\n                        y: graph.height,\n                        z: [0, viewPortDepth]\n                    },\n                    {\n                        x: viewport.width,\n                        y: viewport.height,\n                        z: viewPortDepth\n                    }\n                )\n            )\n        }));\n        const width = scaleRangeToFit(graph.width[1] - graph.width[0], graph.width, viewport.width);\n        const height = scaleRangeToFit(graph.height[1] - graph.height[0], graph.height, viewport.height);\n        return {\n            width: [width / -2, width / 2],\n            height: [height / -2, height / 2],\n            nodes,\n            edges,\n            depth: [0, viewPortDepth]\n        };\n    }, [viewPortDepth, viewport.width, viewport.height, graph]);\n}\n","import { groupBy } from \"lodash\";\nimport React, { FC, useCallback, useMemo, useState } from \"react\";\nimport { Vector3 } from \"three\";\nimport { CameraRig } from \"./camera-rig\";\nimport { MessageProps, MessageArrived } from \"./messages\";\nimport { MessageType, Node, NodeProps, NodeType, NodeEdgeType } from \"./node\";\nimport { Layout, useGraphViewPort } from \"./use-graph-viewport\";\nimport { useThree } from \"react-three-fiber\";\n\n// extend({ OrbitControls })\n\n// function Controls() {\n// \tconst controls = useRef() as any //Ref<ReactThreeFiber.Object3DNode<OrbitControls,typeof OrbitControls>>\n// \tconst { camera, gl } = useThree()\n// \tuseFrame(() => controls && controls.current && controls.current.update())\n// \treturn (\n// \t\t<orbitControls ref={controls} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n// \t)\n// }\n\ninterface GraphProps {\n    graph: Layout;\n    feed: { to: string; messages: MessageProps[] };\n    onSelectNode: (args: { text: string }) => void;\n    selectedNode?: string | null;\n}\n\nexport const Graph: FC<GraphProps> = ({ graph, onSelectNode, selectedNode, feed }) => {\n    const { clock } = useThree();\n    const [messageState, setMessageState] = useState<{ [nodeName: string]: MessageArrived[] | undefined }>({\n        [feed.to]: feed.messages.map((m, i) => ({\n            ...m,\n            frame: clock.getElapsedTime() + (i / feed.messages.length) * 5\n        }))\n    });\n    const scaledGraph = useGraphViewPort(graph);\n\n    const onSelect = useCallback(\n        ({ name }: NodeType) => {\n            onSelectNode({ text: name });\n        },\n        [onSelectNode]\n    );\n    const onEgress = useCallback(\n        (fromNode: NodeType, toNode: NodeType, messages: MessageArrived[]) => {\n            // console.log(\n            //     \"Egress: \" + fromNode.name + \" \" + toNode.name + \" \" + messages.length + \" \" + clock.getElapsedTime()\n            // );\n            setMessageState(state => ({\n                ...state,\n                [fromNode.name]: undefined,\n                [toNode.name]: messages.map(m => ({ ...m, frame: clock.getElapsedTime() }))\n            }));\n        },\n        [clock]\n    );\n    const edgesPerNode = useMemo(() => groupBy(scaledGraph.edges, e => e.from), [scaledGraph]);\n    const nodes = useMemo(() => {\n        return scaledGraph.nodes.map<NodeProps>(node => {\n            const edges = (edgesPerNode[node.name] || []).map<NodeEdgeType>(edge => ({\n                points: edge.points,\n                duration: 5,\n                fromNode: { name: edge.from },\n                toNode: { name: edge.to },\n                onEgress\n            }));\n            return {\n                position: node.position,\n                name: node.name,\n                onEgress,\n                width: node.width || 10,\n                height: node.height || 10,\n                depth: node.width || 10,\n                onSelect: onSelect,\n                messages: messageState[node.name],\n                edges\n            };\n        });\n    }, [scaledGraph, onSelect, messageState, onEgress, edgesPerNode]);\n\n    const selectedNodeIndex = useMemo(() => {\n        const index = scaledGraph.nodes.findIndex(f => f.name === selectedNode);\n        if (index >= 0) return index;\n        return null;\n    }, [selectedNode, scaledGraph]);\n    return (\n        <>\n            <CameraRig\n                targetPosition={\n                    selectedNodeIndex === null\n                        ? new Vector3(0, 0, 0.5)\n                        : new Vector3(\n                              nodes[selectedNodeIndex].position.x,\n                              nodes[selectedNodeIndex].position.y,\n                              nodes[selectedNodeIndex].position.z\n                          )\n                }\n            />\n            {nodes.map((node, i) => (\n                <Node key={node.name} {...node} />\n            ))}\n        </>\n    );\n};\n","import React, { useCallback, useState } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { Color } from \"three\";\nimport { useDag } from \"./component/dagre-graph\";\nimport { Graph } from \"./component/graph\";\n\nconst height = 12;\nconst width = 30;\n\nconst vwapEngine = \"VWAP Engine\";\nconst oms = \"OMS\";\nconst market = \"Exch Links\";\nconst trading = \"Trading Sys\";\nconst prices = \"MD Sys\";\nconst client = \"Client\";\nconst clientIn = \"Client In\";\nconst clientOut = \"Client Out\";\n\nconst nodes = [\n    { name: \"Ref Data Svc\", width: width, height: height },\n    { name: \"EOD Prices\", width, height },\n    { name: prices, width, height },\n    { name: clientIn, width, height },\n    { name: vwapEngine, width: width, height: height },\n    { name: oms, width: width, height: height },\n    { name: market, width, height },\n    { name: \"Config\", width, height },\n    { name: trading, width, height },\n    { name: clientOut, width, height }\n];\n\nconst edges = [\n    { from: clientIn, to: oms, weight: 2 },\n    { from: \"Ref Data Svc\", to: vwapEngine },\n    { from: \"Config\", to: vwapEngine, messages: 1, weight: 2 },\n    { from: prices, to: vwapEngine, messages: 20, weight: 2 },\n    { from: \"EOD Prices\", to: vwapEngine, messages: 5 },\n    { from: \"EOD Prices\", to: trading, messages: 5 },\n    { from: vwapEngine, to: oms, weight: 2 },\n    { from: oms, to: vwapEngine },\n    { from: oms, to: market },\n    { from: oms, to: trading },\n    { from: market, to: oms, weight: 2 },\n    // { from: market, to: trading },\n    { from: trading, to: clientOut }\n];\n\nexport const DemoGraph = () => {\n    const [selectedNode, setNode] = useState<string | null>(null);\n    // const graph = useNgraph(nodes, edges);\n    const graph = useDag(nodes, edges, \"RL\");\n    const unselect = useCallback(\n        p => {\n            setNode(null);\n        },\n        [setNode]\n    );\n    return (\n        <Canvas pixelRatio={window.devicePixelRatio} onClickCapture={unselect}>\n            <ambientLight />\n            <spotLight position={[6, 2, 15]} color={new Color(\"#fff\")} intensity={0.8} />\n            <spotLight position={[-6, -2, 15]} color={new Color(\"#fff\")} intensity={0.6} />\n            <Graph\n                graph={graph}\n                feed={{\n                    to: clientIn,\n                    messages: [\n                        { messageKey: \"A\" },\n                        { messageKey: \"B\" },\n                        { messageKey: \"C\" },\n                        { messageKey: \"D\" },\n                        { messageKey: \"E\" }\n                    ]\n                }}\n                selectedNode={selectedNode}\n                onSelectNode={({ text }) => setNode(text)}\n            />\n        </Canvas>\n    );\n};\n","import { graphlib, layout } from \"dagre\";\nimport { useMemo } from \"react\";\nimport { Layout, PositionedNode, PositionedEdge } from \"./use-graph-viewport\";\nimport { Vector3 } from \"three\";\n\nexport interface Node {\n    name: string;\n    width: number;\n    height: number;\n}\n\nexport interface Edge {\n    from: string;\n    to: string;\n    messages?: number;\n    weight?: number;\n}\n\nexport function useDag(nodes: Node[], edges: Edge[], direction = \"LR\"): Layout {\n    return useMemo<Layout>(() => {\n        const g = new graphlib.Graph({ directed: true });\n        g.setGraph({ edgesep: 100, nodesep: 100, marginx: 20, marginy: 20, rankdir: \"LR\" });\n        g.setDefaultEdgeLabel(() => {\n            return {};\n        });\n        for (const node of nodes) {\n            g.setNode(node.name, { label: node.name, width: node.width, height: node.height, x: 100, y: 0 });\n        }\n        for (const edge of edges) {\n            g.setEdge(edge.from, edge.to, { minlen: 1, messages: edge.messages, weight: edge.weight });\n        }\n        layout(g, { marginx: 250, marginy: 250 });\n        const retnodes = g.nodes().map<PositionedNode>(n => ({\n            name: n,\n            width: g.node(n).width,\n            height: g.node(n).height,\n            depth: 1,\n            position: new Vector3(g.node(n).x, g.node(n).y, -0.1)\n        }));\n        const retedges = g.edges().map<PositionedEdge>(e => {\n            return {\n                points: g.edge(e).points.map(p => new Vector3(p.x, p.y, -0.1)),\n                from: e.v,\n                to: e.w\n            };\n        });\n        const { height, width } = g.graph(); // retnodes.reduce((p, c) => [Math.min(c.x, p[0]), Math.max(c.x + c.width, p[1])], [0, 0]) as [number, number ];\n        const depth = [-20, 0] as [number, number];\n        return { nodes: retnodes, width: [0, width], height: [0, height], depth, edges: retedges } as Layout;\n    }, [nodes, edges]);\n}\n","import React from 'react';\nimport './App.css';\nimport { DemoGraph } from \"./demo-graph\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        DAG 3D Component\n      </header>\n      <DemoGraph />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}