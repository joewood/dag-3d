{"version":3,"sources":["camera-rig.tsx","text.tsx","spin-text.tsx","graph.tsx","demo-graph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CameraRig","pos","targetPosition","camera","useThree","useState","x","y","z","vel","camPos","setCamPos","onFrame","useCallback","state","useFrame","lookAt","Vector3","position","set","useCameraPan","attach","SimpleUVGenerator","generateTopUV","geometry","vertices","indexA","indexB","indexC","cure","j","Math","abs","a_x","a_y","b_x","b_y","c_x","c_y","Vector2","generateSideWallUV","indexD","a_z","b_z","c_z","d_x","d_y","d_z","Text","forwardRef","ref","width","height","text","backgroundColor","color","depth","onClick","props","_width","_height","_text","shape","useMemo","__shape","Shape","moveTo","lineTo","extrudeSettings","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","UVGenerator","textCanvas","canvas","document","createElement","context","getContext","textureWidth","textureHeight","style","top","scale","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","fillText","_onClick","e","args","roughness","metalness","attachArray","image","defaultProps","SpinText","spinX","spinY","useRef","clock","c","current","rotation","getElapsedTime","useAnimatedPath","points","path","n","frac","setFrac","target","i","push","map","getPointAt","Boxes","pt","key","Graph","graph","viewport","convertGraphX","convertGraphY","convertWidth","convertHeight","selectedNode","selectNode","nodes","onSelect","index","findIndex","f","name","paths","edges","edge","CatmullRomCurve3","point","usePaths","DemoGraph","direction","g","graphlib","directed","setGraph","rankdir","edgesep","marginx","marginy","setDefaultEdgeLabel","node","setNode","label","setEdge","from","to","minlen","layout","retnodes","reduce","p","min","max","useDag","pixelRatio","window","devicePixelRatio","Color","intensity","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a100dc7.chunk.js","sourcesContent":["import React, { useCallback, useState, FC } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\nimport { Vector3 } from \"three\"\n\nexport function useCameraPan(targetPosition: Vector3) {\n    const { camera } = useThree();\n    const [camPos, setCamPos] = useState({ pos: { x: 0, y: 0, z: 5 }, vel: { x: 0, y: 0, z: 0 } })\n    const camLookAtZ = -1;\n    const damper = 0.95;\n    const spring = 0.004;\n\n    const onFrame = useCallback(() => {\n        setCamPos(state => ({\n            vel: {\n                x: ((targetPosition.x - state.pos.x) * spring + state.vel.x) * damper,\n                y: ((targetPosition.y - state.pos.y) * spring + state.vel.y) * damper,\n                z: 0//Math.sin(secFraction * 2 * Math.PI) / 500\n            },\n            pos: {\n                x: state.pos.x + state.vel.x,\n                y: state.pos.y + state.vel.y,\n                z: state.pos.z + state.vel.z\n            }\n        }));\n    }, [targetPosition])\n    useFrame(onFrame);\n    camera.lookAt(new Vector3(camPos.pos.x + camPos.vel.x * 3, camPos.pos.y + camPos.vel.y * 3, camLookAtZ))\n    camera.position.set(camPos.pos.x, camPos.pos.y, camPos.pos.z)\n    return [camPos.pos.x, camPos.pos.y, camPos.pos.z];\n}\n\nexport function useSelectedNode(points: any[]) {\n    const [index, setIndex] = useState(0);\n    const cb = useCallback(({ clock }: any) => {\n        const time = clock.getElapsedTime() / 2\n        const index = Math.floor(time) % points.length;\n        setIndex(index);\n    }, [points])\n    useFrame(cb);\n    return index;\n}\n\nexport const CameraRig: FC<{ targetPosition: Vector3 }> = ({ targetPosition }) => {\n    const pos = useCameraPan(targetPosition);\n    return <camera attach=\"camera\" position={pos} />\n}\n","import React, { forwardRef, Ref, useCallback, useMemo } from 'react';\nimport { ReactThreeFiber } from 'react-three-fiber';\nimport { ExtrudeBufferGeometry, ExtrudeGeometryOptions, Mesh, Shape, UVGenerator, Vector2 } from 'three';\n\nexport type MeshProps = ReactThreeFiber.Object3DNode<Mesh, typeof Mesh>;\n\nexport interface TextProps {\n    width?: number;\n    height?: number;\n    text: string;\n    depth: number;\n    backgroundColor?: string;\n    color?: string;\n    position: number[];\n    onClick: (args: { text: string }) => void;\n}\n\nconst SimpleUVGenerator: UVGenerator = {\n\n    generateTopUV: function (geometry: ExtrudeBufferGeometry, vertices: number[], indexA: number, indexB: number, indexC: number) {\n        const cure = (j: number) => (j / Math.abs(j) + 1) / 2\n        var a_x = cure(vertices[indexA * 3]);\n        var a_y = cure(vertices[indexA * 3 + 1]);\n        var b_x = cure(vertices[indexB * 3]);\n        var b_y = cure(vertices[indexB * 3 + 1]);\n        var c_x = cure(vertices[indexC * 3]);\n        var c_y = cure(vertices[indexC * 3 + 1]);\n        // console.log(`${a_x},${a_y} ${b_x},${b_y}`)\n        return [\n            new Vector2(a_x, a_y),\n            new Vector2(b_x, b_y),\n            new Vector2(c_x, c_y)\n        ];\n\n    },\n\n    generateSideWallUV: function (geometry: ExtrudeBufferGeometry, vertices: number[], indexA: number, indexB: number, indexC: number, indexD: number) {\n\n        var a_x = vertices[indexA * 3];\n        var a_y = vertices[indexA * 3 + 1];\n        var a_z = vertices[indexA * 3 + 2];\n        var b_x = vertices[indexB * 3];\n        var b_y = vertices[indexB * 3 + 1];\n        var b_z = vertices[indexB * 3 + 2];\n        var c_x = vertices[indexC * 3];\n        var c_y = vertices[indexC * 3 + 1];\n        var c_z = vertices[indexC * 3 + 2];\n        var d_x = vertices[indexD * 3];\n        var d_y = vertices[indexD * 3 + 1];\n        var d_z = vertices[indexD * 3 + 2];\n\n        if (Math.abs(a_y - b_y) < 0.01) {\n\n            return [\n                new Vector2(a_x, 1 - a_z),\n                new Vector2(b_x, 1 - b_z),\n                new Vector2(c_x, 1 - c_z),\n                new Vector2(d_x, 1 - d_z)\n            ];\n\n        } else {\n\n            return [\n                new Vector2(a_y, 1 - a_z),\n                new Vector2(b_y, 1 - b_z),\n                new Vector2(c_y, 1 - c_z),\n                new Vector2(d_y, 1 - d_z)\n            ];\n\n        }\n\n    }\n};\n\n\n\nexport const Text = forwardRef(({ width, height, text, backgroundColor, color, depth, onClick, position, ...props }: TextProps, ref: Ref<MeshProps>) => {\n    const _width = width || 1\n    const _height = height || 0.3\n    const _text = text || '<null>'\n\n\n    const shape = useMemo(() => {\n        const __shape = new Shape();\n        __shape.moveTo(_width / 2 * -1, _height / 2 * -1);\n        __shape.lineTo(_width / 2, _height / 2 * -1);\n        __shape.lineTo(_width / 2, _height / 2);\n        __shape.lineTo(_width / 2 * -1, _height / 2);\n        __shape.lineTo(_width / 2 * -1, _height / 2 * -1);\n        return __shape;\n    }, [_width, _height])\n\n    const extrudeSettings: ExtrudeGeometryOptions = {\n        steps: 2,\n        depth: depth,\n        bevelEnabled: true,\n        bevelThickness: 0.03,\n        bevelSize: 0.04,\n        bevelOffset: 0.0,\n        bevelSegments: 5,\n        UVGenerator: SimpleUVGenerator\n    };\n\n    const textCanvas = useMemo(() => {\n        const canvas = document.createElement('canvas')\n        const context = canvas.getContext('2d')\n        if (!context) return null;\n        const textureWidth = _width * 20;\n        const textureHeight = _height * 20;\n        canvas.style.position = 'absolute'\n        canvas.style.top = `calc(50% - ${textureHeight / 2}px)`\n        canvas.style.width = textureWidth + 'px'\n        canvas.style.height = textureHeight + 'px'\n        canvas.width = textureWidth * 20\n        canvas.height = textureHeight * 20\n        context.scale(20, 20)\n        context.fillStyle = backgroundColor || 'grey'\n\n        context.fillRect(0, 0, textureWidth, textureHeight)\n        const fontSize = textureHeight / 1.8;\n        context.font = `bold ${fontSize}px Arial, sans-serif`\n        context.fillStyle = color || 'white'\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        const x = textureWidth / 2\n        const y = textureHeight / 2\n        context.fillText(_text, x, y)\n        return canvas\n    }, [_width, _height, color, backgroundColor, _text])\n    const _onClick = useCallback((e: any) => {\n        onClick({ text })\n    }, [text, onClick])\n    return (\n        <mesh ref={ref} onClick={_onClick} position={[position[0], position[1], position[2] - depth / 2]} {...props}>\n            <boxBufferGeometry args={[_width, _height, depth || 0.06]} attach=\"geometry\" />\n            <extrudeGeometry attach=\"geometry\" args={[shape, extrudeSettings]} />\n            <meshStandardMaterial roughness={0.2} metalness={0.6} attachArray=\"material\" >\n                <canvasTexture attach=\"map\" image={textCanvas} />\n            </meshStandardMaterial>\n            <meshStandardMaterial roughness={0.2} metalness={0.8} attachArray=\"material\" color={backgroundColor} />\n        </mesh>\n    )\n})\n\nText.defaultProps = { depth: 0.04 }\n","import React, { FC, Ref, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { Euler } from 'three'\nimport { MeshProps, Text, TextProps } from \"./text\"\n\ninterface SpinProps extends TextProps {\n    spinX?: number;\n    spinY?: number;\n}\nexport const SpinText: FC<SpinProps> = ({ spinX, spinY, ...props }) => {\n    const ref: Ref<MeshProps> = useRef<MeshProps>(null)\n    useFrame(({ clock }) => {\n        const c = ref.current;\n        if (!!c) {\n            const r = c.rotation as Euler;\n            r.set(clock.getElapsedTime() * (spinX || 0.0), clock.getElapsedTime() * (spinY || 0.0), 0);\n        }\n    })\n    return <Text ref={ref} {...props} />\n}\n","import { graphlib, layout } from \"dagre\"\nimport React, { FC, useCallback, useMemo, useState } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\nimport { CatmullRomCurve3, Vector3 } from \"three\"\nimport { CameraRig } from \"./camera-rig\"\nimport { SpinText } from \"./spin-text\"\n\n\nfunction useRange(n: number) {\n\treturn useMemo(() => {\n\t\tconst target: number[] = []\n\t\tfor (let i = 0; i < n; i++) target.push(i);\n\t\treturn target;\n\t}, [n]);\n}\n\ninterface Node {\n\tname: string;\n\twidth: number;\n\theight: number;\n}\n\ninterface Edge {\n\tfrom: string;\n\tto: string;\n}\n\ninterface PositionedNode {\n\tname: string;\n\twidth: number;\n\theight: number;\n\tx: number;\n\ty: number;\n}\n\ninterface PositionedEdge {\n\tname?: string;\n\tpoints: { x: number, y: number }[]\n}\n\ninterface Layout {\n\tnodes: PositionedNode[];\n\tedges: PositionedEdge[];\n\twidth: [number, number];\n\theight: [number, number];\n}\n\nexport function useDag(nodes: Node[], edges: Edge[], direction = \"LR\"): Layout {\n\treturn useMemo(() => {\n\t\tconst g = new graphlib.Graph({ directed: true });\n\t\tg.setGraph({ rankdir: direction, edgesep: 2, marginx: 20, marginy: 20 });\n\t\tg.setDefaultEdgeLabel(() => { return {} });\n\t\tfor (const node of nodes) {\n\t\t\tg.setNode(node.name, { label: node.name, width: node.width, height: node.height });\n\t\t}\n\t\tfor (const edge of edges) {\n\t\t\tg.setEdge(edge.from, edge.to, { minlen: 1 });\n\t\t}\n\t\tlayout(g);\n\t\tconst retnodes = g.nodes().map(n => ({ name: n, width: g.node(n).width, height: g.node(n).height, x: g.node(n).x, y: g.node(n).y }));\n\t\tconst width = retnodes.reduce((p, c) => [Math.min(c.x, p[0]), Math.max(c.x + c.width, p[1])], [0, 0]) as [number, number]\n\t\tconst height = retnodes.reduce((p, c) => [Math.min(c.y, p[0]), Math.max(c.y + c.height, p[1])], [0, 0]) as [number, number]\n\t\tconst retedges = g.edges().map(e => ({ points: g.edge(e).points }));\n\t\treturn { nodes: retnodes, width, height, edges: retedges }\n\t}, [nodes, edges, direction])\n}\n\n// extend({ OrbitControls })\n\n// function Controls() {\n// \tconst controls = useRef() as any //Ref<ReactThreeFiber.Object3DNode<OrbitControls,typeof OrbitControls>>\n// \tconst { camera, gl } = useThree()\n// \tuseFrame(() => controls && controls.current && controls.current.update())\n// \treturn (\n// \t\t<orbitControls ref={controls} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n// \t)\n// }\n\n\ninterface GraphProps {\n\tgraph: Layout;\n}\n\nfunction usePaths(edges: PositionedEdge[], convertGraphX: (x: number) => number, convertGraphY: (y: number) => number) {\n\tconst paths = useMemo(() => {\n\t\treturn edges.map(edge => new CatmullRomCurve3(edge.points.map(point => new Vector3(convertGraphX(point.x), convertGraphY(point.y), -0.1)), false, \"catmullrom\"))\n\t}, [edges, convertGraphX, convertGraphY])\n\treturn paths;\n}\n\ninterface BoxesProps {\n\tpath: CatmullRomCurve3;\n\tpoints: number;\n}\n\nfunction useAnimatedPath(points: number, path: CatmullRomCurve3) {\n\tconst [frac, setFrac] = useState(0)\n\tuseFrame(({ clock }) => setFrac(((clock.getElapsedTime() * 100) % 1000) / 1000))\n\treturn useRange(points).map(i => {\n\t\treturn path.getPointAt(((i / points + frac) * 1000 % 1000) / 1000)\n\t})\n}\n\nconst Boxes: FC<BoxesProps> = ({ path, points }) => {\n\treturn <>\n\t\t{useAnimatedPath(points, path).map((pt, i) => {\n\t\t\treturn <mesh key={i} position={pt}>\n\t\t\t\t<sphereGeometry attach=\"geometry\" args={[0.06]} />\n\t\t\t\t<meshPhongMaterial attach=\"material\" color=\"#4070f0\" />\n\t\t\t</mesh>\n\t\t})\n\t\t}\n\t</>\n}\n\nexport const Graph: FC<GraphProps> = ({ graph }) => {\n\tconst { viewport } = useThree();\n\tconst convertGraphX = useCallback((x: number) => (x - graph.width[0]) * (viewport.width) / (graph.width[1] - graph.width[0]) - viewport.width / 2, [viewport, graph])\n\tconst convertGraphY = useCallback((y: number) => (y - graph.height[0]) * (viewport.height) / (graph.height[1] - graph.height[0]) - viewport.height / 2, [graph, viewport])\n\tconst convertWidth = useCallback((width: number) => width * viewport.width / (graph.width[1] - graph.width[0]), [viewport, graph])\n\tconst convertHeight = useCallback((height: number) => height * viewport.height / (graph.height[1] - graph.height[0]), [viewport, graph])\n\tconst [selectedNode, selectNode] = useState(0)\n\tconst points = useMemo(() => {\n\t\treturn graph.nodes.map(n => new Vector3(convertGraphX(n.x), convertGraphY(n.y), -0.1))\n\t}, [graph, convertGraphX, convertGraphY])\n\tconst onSelect = useCallback(({ text }: { text: string }) => {\n\t\tconst index = graph.nodes.findIndex(f => f.name === text);\n\t\tif (index >= 0) selectNode(index);\n\t}, [graph, selectNode])\n\tconst paths = usePaths(graph.edges, convertGraphX, convertGraphY)\n\treturn <>\n\t\t<CameraRig targetPosition={points[selectedNode]} />\n\t\t{\n\t\t\tgraph.nodes.map((n, i) => (<SpinText\n\t\t\t\tkey={n.name}\n\t\t\t\tonClick={onSelect}\n\t\t\t\ttext={n.name}\n\t\t\t\tcolor={i === selectedNode ? \"black\" : \"white\"}\n\t\t\t\twidth={convertWidth(n.width)}\n\t\t\t\theight={convertHeight(n.height)}\n\t\t\t\tbackgroundColor=\"#4070f0\"\n\t\t\t\tdepth={0.2}\n\t\t\t\tposition={[convertGraphX(n.x), convertGraphY(n.y), -0.1]} />))\n\t\t}\n\t\t{\n\t\t\tpaths.map((path, i) => {\n\t\t\t\treturn (<mesh key={\"mesh\" + i}>\n\t\t\t\t\t<tubeGeometry\n\t\t\t\t\t\tattach=\"geometry\"\n\t\t\t\t\t\targs={[path, 30, 0.03, 8, false]}\n\t\t\t\t\t/>\n\t\t\t\t\t<meshPhongMaterial attach=\"material\" color=\"#333\" />\n\t\t\t\t</mesh>);\n\t\t\t})}\n\t\t{paths.map((path, i) => (<Boxes path={path} points={8} />))}\n\t</>\n\n}\n\n\n","import React from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { Color } from \"three\"\nimport { Graph, useDag } from \"./graph\"\n\nexport const DemoGraph = () => {\n    const height = 8;\n    const width = 60;\n    const vwapEngine = \"VWAP Engine\"\n    const oms = \"OMS\"\n    const market = \"Exch Links\"\n    const trading = \"Trading Sys\"\n    const prices = \"MD Sys\"\n    const client = \"Client\"\n    const clientSys = \"Client Int\"\n    const graph = useDag([\n        { name: \"Config\", width, height },\n        { name: \"Ref Data Svc\", width, height },\n        { name: \"EOD Prices\", width, height },\n        { name: prices, width, height },\n        { name: client, width, height },\n        { name: clientSys, width, height },\n        { name: vwapEngine, width, height },\n        { name: oms, width, height },\n        { name: market, width, height },\n        { name: trading, width, height }\n    ], [\n        { from: \"Config\", to: vwapEngine },\n        { from: client, to: clientSys },\n        { from: clientSys, to: oms },\n        { from: \"Ref Data Svc\", to: vwapEngine },\n        { from: prices, to: vwapEngine },\n        { from: \"EOD Prices\", to: vwapEngine },\n        { from: vwapEngine, to: oms },\n        { from: oms, to: market },\n        { from: market, to: trading },\n        { from: trading, to: clientSys }\n    ],\n        \"RL\");\n    return (\n        <Canvas pixelRatio={window.devicePixelRatio}>\n            <ambientLight />\n            <spotLight position={[-7, 1, 3]} color={new Color(\"#fff\")} intensity={0.8} rotation={[-0.2, 1.2, 0]} />\n            <spotLight position={[0, -5, 3]} color={new Color(\"#fff\")} intensity={0.8} rotation={[1.2, 0, 0]} />\n            <Graph graph={graph} />\n        </Canvas>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport { DemoGraph } from \"./demo-graph\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        DAG 3D Component\n      </header>\n      <DemoGraph />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}