{"version":3,"sources":["component/messages.tsx","component/edge.tsx","three-utils/text.tsx","component/node.tsx","three-utils/use-spring-3d.ts","three-utils/camera-rig.tsx","graph/use-graph-viewport.ts","graph/graph.tsx","demo-graph.tsx","graph/nlayout-graph.ts","component/record-stream.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Messages","prefix","curve","elapsed","messages","duration","animPoints","useMemo","map","message","key","messageKey","pt","getPointAt","Math","max","min","frame","color","point","i","position","attach","args","Edge","fromNode","toNode","points","onEgress","_onEgress","useCallback","useState","elapsedMs","setElapsedMs","useFrame","clock","elapsedTime","messagesBuffered","messagePump","undefined","setMessages","useEffect","length","msg","unexpiredMessages","m","filter","expiredMessages","emptyArray","keyed","keyBy","useTrackMessages","CatmullRomCurve3","usePath","name","stepFunction","v","neg","abs","generateTopUV","geometry","vertices","indexA","indexB","indexC","rear","a_x","a_y","b_x","b_y","c_x","c_y","Vector2","generateSideWallUV","indexD","depth","options","curves","shapes","mX","reduce","p","c","v1","x","v2","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","mY","y","mZ","ofMax","a_z","b_z","c_z","d_y","d_z","right","Text","forwardRef","ref","width","height","text","backgroundColor","onClick","props","_width","_height","_text","shape","__shape","Shape","moveTo","lineTo","extrudeSettings","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","UVGenerator","textCanvas","canvas","document","createElement","context","getContext","textureWidth","textureHeight","style","top","scale","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","fillText","_onClick","e","roughness","metalness","attachArray","image","defaultProps","Label","onSelect","_onSelect","Vector3","z","Edges","edges","edge","Node","edgeProps","useEdges","setElpased","floor","useCheckMessages","useVel","initial","target","damper","spring","pos","vel","state","set","onFrame","CameraRig","targetPosition","distance","rotate","useThree","camera","t","getElapsedTime","PI","cos","sin","camPosS","camPos","camLookAt","lookAt","useCameraPan","scaleToFit3","midGraph","scaleFactor","scalePoint","graph","viewportWidth","viewportHeight","useScaleFactor","viewport","maxGraph","Graph","onSelectNode","selectedNode","feed","messageState","setMessageState","f","to","count","scaledGraph","nodes","node","from","useGraphViewPort","edgesPerNode","groupBy","selectedNodeIndex","index","findIndex","DemoGraph","pumpProducer","pumpValue","setNode","createGraph","n","addNode","addLink","layout","layout3d","gravity","setNodePosition","random","step","retnodes","getNodePosition","retEdges","fromPos","toPos","getNode","data","mid","delta","connectPoint","output","midp","fromPoint","toPoint","fromHose","toHose","getGraphRect","x1","x2","y1","y2","z1","z2","useNgraph","unselect","pixelRatio","window","devicePixelRatio","onClickCapture","RecordStream","filename","downloadUrl","setDownloadUrl","recorder","setRecorder","videoRef","useRef","onsStart","a","recData","navigator","mediaDevices","getDisplayMedia","video","audio","stream","current","srcObject","currRec","MediaRecorder","mimeType","ondataavailable","push","onstop","blob","Blob","type","URL","createObjectURL","start","doit","onStop","stop","padding","display","href","download","commonNode","weight","buttonStyle","fontWeight","margin","App","pump","setPump","pump1","id","pump2","pump3","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a2f613c.chunk.js","sourcesContent":["import React, { FC, useMemo } from \"react\";\nimport { CatmullRomCurve3 } from \"three\";\n\nexport interface MessageProps {\n    messageKey: string;\n    value?: number;\n    content?: string;\n}\n\nexport interface MessageArrived extends MessageProps {\n    frame: number;\n}\n\ninterface MessagesProps {\n    curve: CatmullRomCurve3;\n    messages: MessageArrived[] | undefined;\n    duration: number;\n    elapsed: number;\n    prefix: string;\n}\n\nexport const Messages: FC<MessagesProps> = ({ prefix, curve, elapsed, messages, duration }) => {\n    // const color = useMemo(() => {\n    //     const key = messages && messages.length > 0 && messages[0].messageKey;\n    //     if (!key) return \"#fff\";\n    //     return key[0] === \"1\" ? \"#4070f0\" : key[0] === \"2\" ? \"#f07040\" : \"#70f040\";\n    // }, [messages]);\n    const animPoints = useMemo(() => {\n        return (messages || []).map(message => {\n            return {\n                key: message.messageKey,\n                pt: curve.getPointAt(Math.max(0, Math.min(1, (elapsed - message.frame) / duration))),\n                color: message.messageKey[0] === \"1\" ? \"#4070f0\" : message.messageKey[0] === \"2\" ? \"#f07040\" : \"#70f040\"\n            };\n        });\n    }, [elapsed, messages, curve, duration]);\n\n    return (\n        <>\n            {animPoints.map((point, i) => {\n                return (\n                    <mesh key={prefix + i} position={point.pt}>\n                        <sphereGeometry attach=\"geometry\" args={[0.076]} />\n                        <meshPhongMaterial attach=\"material\" color={point.color} />\n                    </mesh>\n                );\n            })}\n        </>\n    );\n};\n","import { keyBy } from \"lodash\";\nimport React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport { CatmullRomCurve3, Vector3 } from \"three\";\nimport { MessageArrived, Messages } from \"./messages\";\nimport { NodeProps, NodeType } from \"./node\";\n\nexport function usePath(points: Vector3[]) {\n    return useMemo(() => {\n        return new CatmullRomCurve3(points, false, \"catmullrom\");\n    }, [points]);\n}\n\nfunction useTrackMessages(\n    messagePump: MessageArrived[] | undefined,\n    duration: number,\n    elapsedTime: number,\n    onEgress: (messages: MessageArrived[]) => void\n) {\n    const [messages, setMessages] = useState<MessageArrived[] | undefined>(undefined);\n    useEffect(() => {\n        if (!messagePump || messagePump.length === 0) return;\n        // console.log(\"New messages: \" + JSON.stringify(messagePump));\n        setMessages(msg => [...(msg || []), ...messagePump]);\n    }, [messagePump, duration]);\n    const unexpiredMessages = useMemo<MessageArrived[]>(() => {\n        if (!messages || messages.length === 0) return [];\n        const m = messages[0];\n        if (elapsedTime >= m.frame + duration) {\n            return messages.filter(m => elapsedTime < m.frame + duration);\n        } else {\n            return messages;\n        }\n    }, [messages, duration, elapsedTime]);\n\n    const expiredMessages = useMemo(() => {\n        const emptyArray: MessageArrived[] = [];\n        if (!messages || messages.length === 0) {\n            return emptyArray;\n        }\n        const m = messages[0];\n        if (elapsedTime >= m.frame + duration) {\n            // console.log(\"Filtering \");\n            return messages.filter(m => elapsedTime >= m.frame + duration);\n        } else return emptyArray;\n    }, [messages, duration, elapsedTime]);\n\n    useEffect(() => {\n        if (!expiredMessages || expiredMessages.length === 0) return;\n        const keyed = keyBy(expiredMessages, m => m.messageKey);\n        setMessages(msg => (msg || []).filter(m => !keyed[m.messageKey]));\n    }, [expiredMessages]);\n\n    useEffect(() => {\n        // console.log({ elapsedTime });\n        if (!expiredMessages || expiredMessages.length === 0) return;\n        // console.log(\"Time to delete: \" + expiredMessages.length + \" \" + messages?.length);\n        onEgress(expiredMessages);\n    }, [duration, expiredMessages, onEgress]);\n    return unexpiredMessages;\n}\n\nexport interface EdgeProps extends Pick<NodeProps, \"onEgress\"> {\n    points: Vector3[];\n    duration: number;\n    fromNode: NodeType;\n    toNode: NodeType;\n    elapsed: number;\n    messages?: MessageArrived[];\n}\n\nexport const Edge: FC<EdgeProps> = ({ fromNode, toNode, messages, points, duration, elapsed, onEgress }) => {\n    const _onEgress = useCallback((messages: MessageArrived[]) => onEgress(fromNode, toNode, messages), [\n        fromNode,\n        toNode,\n        onEgress\n    ]);\n    const [elapsedMs, setElapsedMs] = useState(0);\n    useFrame(({ clock }) => {\n        setElapsedMs(clock.elapsedTime);\n    });\n\n    const messagesBuffered = useTrackMessages(messages, duration, elapsed, _onEgress);\n    const curve = usePath(points);\n    return (\n        <>\n            <mesh key={`${fromNode.name}-${toNode.name}-edge`}>\n                <tubeGeometry attach=\"geometry\" args={[curve, 80, 0.03, 8, false]} />\n                <meshPhongMaterial attach=\"material\" color=\"#333\" />\n            </mesh>\n            <Messages\n                key={`${fromNode.name}-${toNode.name}-messages`}\n                elapsed={elapsedMs}\n                prefix={`${fromNode.name}-${toNode.name}-messages`}\n                curve={curve}\n                duration={duration}\n                messages={messagesBuffered}\n            />\n        </>\n    );\n};\n","import React, { forwardRef, Ref, useCallback, useMemo } from \"react\";\nimport { ReactThreeFiber } from \"react-three-fiber\";\nimport { ExtrudeBufferGeometry, ExtrudeGeometryOptions, LineCurve3, Mesh, Shape, Vector2, Vector3 } from \"three\";\n\nexport type MeshProps = ReactThreeFiber.Object3DNode<Mesh, typeof Mesh>;\n\nexport interface TextProps {\n    width: number;\n    height: number;\n    text: string;\n    depth: number;\n    backgroundColor?: string;\n    color?: string;\n    position: Vector3;\n    onClick: (args: { text: string }) => void;\n}\n\nconst stepFunction = (v: number, neg = false) => (neg ? 1 - (v / Math.abs(v) + 1) / 2 : (v / Math.abs(v) + 1) / 2);\n\nconst generateTopUV = (\n    geometry: ExtrudeBufferGeometry,\n    vertices: number[],\n    indexA: number,\n    indexB: number,\n    indexC: number\n) => {\n    const rear = vertices[indexA * 3 + 2] < 0;\n    var a_x = stepFunction(vertices[indexA * 3], rear);\n    var a_y = stepFunction(vertices[indexA * 3 + 1], false);\n    var b_x = stepFunction(vertices[indexB * 3], rear);\n    var b_y = stepFunction(vertices[indexB * 3 + 1], false);\n    var c_x = stepFunction(vertices[indexC * 3], rear);\n    var c_y = stepFunction(vertices[indexC * 3 + 1], false);\n    return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n};\n\nconst generateSideWallUV = (\n    geometry: ExtrudeBufferGeometry,\n    vertices: number[],\n    indexA: number,\n    indexB: number,\n    indexC: number,\n    indexD: number\n) => {\n    const depth = (geometry as any)[\"parameters\"].options.depth;\n    const curves = (geometry as any)[\"parameters\"].shapes.curves as LineCurve3[];\n    const mX = curves.reduce(\n        (p, c) => [Math.min(p[0], c.v1.x, c.v2.x), Math.max(p[1], c.v1.x, c.v2.x)] as [number, number],\n        [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER] as [number, number]\n    );\n    const mY = curves.reduce(\n        (p, c) => [Math.min(p[0], c.v1.y, c.v2.y), Math.max(p[1], c.v1.y, c.v2.y)] as [number, number],\n        [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER] as [number, number]\n    );\n    const mZ = [0, depth] as [number, number];\n    const ofMax = (v: number, max: [number, number]) => (v - max[0]) / (max[1] - max[0]);\n    var a_x = ofMax(vertices[indexA * 3], mX);\n    var a_y = ofMax(vertices[indexA * 3 + 1], mY);\n    var a_z = ofMax(vertices[indexA * 3 + 2], mZ);\n    var b_x = ofMax(vertices[indexB * 3], mX);\n    var b_y = ofMax(vertices[indexB * 3 + 1], mY);\n    var b_z = ofMax(vertices[indexB * 3 + 2], mZ);\n    var c_x = ofMax(vertices[indexC * 3], mX);\n    var c_y = ofMax(vertices[indexC * 3 + 1], mY);\n    var c_z = ofMax(vertices[indexC * 3 + 2], mZ);\n    var d_x = ofMax(vertices[indexD * 3], mX);\n    var d_y = ofMax(vertices[indexD * 3 + 1], mY);\n    var d_z = ofMax(vertices[indexD * 3 + 2], mZ);\n\n    // if it's left or right side then x will not vary\n    if (Math.abs(a_x - b_x) < 0.01) {\n        const right = (x: number) => (a_x > 0.5 ? 1 - x : x);\n        return [\n            new Vector2(right(a_z), a_y),\n            new Vector2(right(b_z), b_y),\n            new Vector2(right(c_z), c_y),\n            new Vector2(right(d_z), d_y)\n        ];\n    } else {\n        return [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\n    }\n};\n\nexport const Text = forwardRef(\n    (\n        { width, height, text, backgroundColor, color, depth, onClick, position, ...props }: TextProps,\n        ref: Ref<MeshProps>\n    ) => {\n        const _width = width;\n        const _height = height;\n        const _text = text;\n\n        const shape = useMemo(() => {\n            const __shape = new Shape();\n            __shape.moveTo((_width / 2) * -1, (_height / 2) * -1);\n            __shape.lineTo(_width / 2, (_height / 2) * -1);\n            __shape.lineTo(_width / 2, _height / 2);\n            __shape.lineTo((_width / 2) * -1, _height / 2);\n            __shape.lineTo((_width / 2) * -1, (_height / 2) * -1);\n            return __shape;\n        }, [_width, _height]);\n\n        const extrudeSettings = useMemo<ExtrudeGeometryOptions>(\n            () => ({\n                steps: 2,\n                depth: depth,\n                bevelEnabled: true,\n                bevelThickness: 0.03,\n                bevelSize: 0.02,\n                bevelOffset: 0.0,\n                bevelSegments: 5,\n                UVGenerator: { generateTopUV, generateSideWallUV }\n            }),\n            [depth]\n        );\n\n        const textCanvas = useMemo(() => {\n            const canvas = document.createElement(\"canvas\");\n            const context = canvas.getContext(\"2d\");\n            if (!context) return null;\n            const textureWidth = _width * 20;\n            const textureHeight = _height * 20;\n            canvas.style.position = \"absolute\";\n            canvas.style.top = `calc(50% - ${textureHeight / 2}px)`;\n            canvas.style.width = textureWidth + \"px\";\n            canvas.style.height = textureHeight + \"px\";\n            canvas.width = textureWidth * 20;\n            canvas.height = textureHeight * 20;\n            context.scale(20, 20);\n            context.fillStyle = backgroundColor || \"grey\";\n\n            context.fillRect(0, 0, textureWidth, textureHeight);\n            const fontSize = textureHeight / 1.8;\n            context.font = `bold ${fontSize}px Arial, sans-serif`;\n            context.fillStyle = color || \"white\";\n            context.textAlign = \"center\";\n            context.textBaseline = \"middle\";\n            const x = textureWidth / 2;\n            const y = textureHeight / 2;\n            context.fillText(_text, x, y);\n            return canvas;\n        }, [_width, _height, color, backgroundColor, _text]);\n        const _onClick = useCallback(\n            (e: any) => {\n                onClick({ text });\n            },\n            [text, onClick]\n        );\n        return (\n            <mesh ref={ref} onClick={_onClick} position={position} {...props}>\n                <boxBufferGeometry args={[_width, _height, depth]} attach=\"geometry\" />\n                <extrudeGeometry attach=\"geometry\" args={[shape, extrudeSettings]} />\n                <meshStandardMaterial roughness={0.2} metalness={0.8} attachArray=\"material\">\n                    <canvasTexture attach=\"map\" image={textCanvas} />\n                </meshStandardMaterial>\n                <meshStandardMaterial roughness={0.2} metalness={0.8} attachArray=\"material\">\n                    <canvasTexture attach=\"map\" image={textCanvas} />\n                </meshStandardMaterial>\n            </mesh>\n        );\n    }\n);\n\nText.defaultProps = { depth: 0.04, width: 1, height: 0.3, text: \"<null>\" };\n","import React, { FC, useCallback, useMemo, useState } from \"react\";\nimport { Vector3 } from \"three\";\nimport { Edge, EdgeProps } from \"./edge\";\nimport { MessageProps, MessageArrived } from \"./messages\";\nimport { Text } from \"../three-utils/text\";\nimport { useFrame } from \"react-three-fiber\";\n\nexport type NodeEdgeType = Pick<EdgeProps, \"duration\" | \"messages\" | \"points\" | \"toNode\">;\nexport type NodeType = Pick<NodeProps, \"name\">;\nexport type MessageType = Pick<MessageProps, \"messageKey\">;\n\nexport interface NodeEdge {\n    to: string;\n    points: Vector3;\n}\n\nexport interface NodeProps {\n    position: Vector3;\n    width: number;\n    height: number;\n    depth: number;\n    name: string;\n    edges: NodeEdgeType[];\n    messages: MessageArrived[] | undefined;\n    onEgress: (fromNode: NodeType, toNode: NodeType, messages: MessageArrived[]) => void;\n    onSelect: (args: NodeType) => void;\n}\n\nexport function useCheckMessages(messages: MessageType[] | undefined) {\n    const [elapsedTime, setElpased] = useState(0);\n    useFrame(({ clock }) => {\n        setElpased(Math.floor(clock.elapsedTime * 100) / 100);\n    });\n    return elapsedTime;\n}\ninterface LabelProps {\n    name: string;\n    width: number;\n    depth: number;\n    height: number;\n    position: Vector3;\n    onSelect: (x: { name: string }) => void;\n}\n\nexport const Label: FC<LabelProps> = ({ name, position, width, height, depth, onSelect }) => {\n    const _onSelect = useCallback(({ text }: { text: string }) => onSelect({ name: text }), [onSelect]);\n    return (\n        <Text\n            key={name}\n            onClick={_onSelect}\n            text={name}\n            color={\"#202020\"}\n            width={width}\n            height={height * 0.25}\n            backgroundColor=\"#a0a0ff\"\n            depth={depth}\n            position={new Vector3(position.x, position.y, position.z - depth / 2)}\n        />\n    );\n};\n\nexport const Edges: FC<{ edges: EdgeProps[] }> = ({ edges }) => (\n    <>\n        {edges.map(edge => (\n            <Edge key={`${edge.fromNode.name}-${edge.toNode.name}-edge`} {...edge} />\n        ))}\n    </>\n);\n\nexport const Node: FC<NodeProps> = ({ name, onSelect, width, height, depth, position, messages, edges, onEgress }) => {\n    const elapsed = useCheckMessages(messages);\n    const edgeProps = useEdges(edges, name, messages, elapsed, onEgress);\n    return (\n        <>\n            <Label\n                key=\"label\"\n                name={name}\n                onSelect={onSelect}\n                width={width}\n                height={height}\n                depth={Math.abs(depth)}\n                position={position}\n            />\n            <Edges edges={edgeProps} />\n        </>\n    );\n};\n\nexport function useEdges(\n    edges: NodeEdgeType[],\n    name: string,\n    messages: MessageArrived[] | undefined,\n    elapsed: number,\n    onEgress: (fromNode: Pick<NodeProps, \"name\">, toNode: Pick<NodeProps, \"name\">, messages: MessageArrived[]) => void\n) {\n    return useMemo<EdgeProps[]>(\n        () =>\n            edges.map(edge => ({\n                ...edge,\n                duration: edge.duration, //+ Math.floor(Math.random() * 4),\n                fromNode: { name },\n                messages,\n                elapsed,\n                onEgress\n            })),\n        [edges, name, elapsed, messages, onEgress]\n    );\n}\n","import { useCallback, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Vector3 } from \"three\";\n\ninterface UseVelConfig {\n    damper?: number;\n    spring?: number;\n}\n\nexport function useVel(initial: Vector3, target: Vector3, { damper = 0.72, spring = 0.003 }: UseVelConfig) {\n    const [state, set] = useState({ pos: { x: initial.x, y: initial.y, z: initial.z }, vel: { x: 0, y: 0, z: 0 } });\n    const onFrame = useCallback(() => {\n        set(state => ({\n            vel: {\n                x: ((target.x - state.pos.x) * spring + state.vel.x) * damper,\n                y: ((target.y - state.pos.y) * spring + state.vel.y) * damper,\n                z: ((target.z - state.pos.z) * spring + state.vel.z) * damper\n            },\n            pos: {\n                x: state.pos.x + state.vel.x,\n                y: state.pos.y + state.vel.y,\n                z: state.pos.z + state.vel.z\n            }\n        }));\n    }, [target.x, target.y, target.z, damper, spring]);\n    useFrame(onFrame);\n    return new Vector3(state.pos.x, state.pos.y, state.pos.z);\n}\n","import React, { FC, useCallback, useState } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport { Vector3 } from \"three\";\nimport { useVel } from \"./use-spring-3d\";\n\nexport function useCameraPan(targetPosition: Vector3, { distance, rotate }: { distance: number; rotate?: number }) {\n    const { clock, camera } = useThree();\n    const t = clock.getElapsedTime() * (((rotate || 360) / 56000) * (2 * Math.PI)) + Math.PI / 2;\n    const x = distance * Math.cos(t) + targetPosition.x;\n    const z = distance * Math.sin(t) + targetPosition.z;\n    const camPosS = new Vector3(x, targetPosition.y, z);\n    const camPos = useVel(new Vector3(0, 0, 10), camPosS, { spring: 0.006, damper: 0.9 });\n    const camLookAt = useVel(new Vector3(0, 0, 0), targetPosition, {\n        spring: 0.01,\n        damper: 0.85\n    });\n    // camera.lookAt(new Vector3(0, 0, 0));\n    camera.lookAt(camLookAt);\n    camera.position.set(camPos.x, camPos.y, camPos.z);\n    // camera.position.set(0, 0, 10);\n    // return [0, 0, 10];\n    return [camPos.x, camPos.y, camPos.z];\n}\n\nexport function useSelectedNode(points: any[]) {\n    const [index, setIndex] = useState(0);\n    const cb = useCallback(\n        ({ clock }: any) => {\n            const time = clock.getElapsedTime() / 2;\n            const index = Math.floor(time) % points.length;\n            setIndex(index);\n        },\n        [points]\n    );\n    useFrame(cb);\n    return index;\n}\n\nexport const CameraRig: FC<{ targetPosition: Vector3; distance: number }> = ({ targetPosition, distance }) => {\n    const pos = useCameraPan(new Vector3(targetPosition.x, targetPosition.y, targetPosition.z), { distance });\n    return <perspectiveCamera attach=\"camera\" position={pos} args={[45, 2, 1, 100]} />;\n};\n","import { useMemo } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { Vector3 } from \"three\";\n\nexport interface PositionedNode {\n    name: string;\n    width: number;\n    height: number;\n    depth: number;\n    position: Vector3;\n}\n\nexport interface PositionedEdge {\n    name?: string;\n    messages?: number;\n    from: string;\n    to: string;\n    points: Vector3[];\n}\n\nexport type MinMax = [number, number];\n\nexport interface Layout {\n    nodes: PositionedNode[];\n    edges: PositionedEdge[];\n    width: MinMax;\n    height: MinMax;\n    depth: MinMax;\n}\n\n// export function usePath(edges: PositionedEdge[]) {\n//     const paths = useMemo(() => {\n//         const edgeCurves = edges.map(edge => ({\n//             edge,\n//             curve: new CatmullRomCurve3(edge.points, false, \"catmullrom\")\n//         }));\n//         return groupBy(edgeCurves, e => `${e.edge.from}**${e.edge.to}`);\n//     }, [edges]);\n//     return paths;\n// }\nconst viewPortDepth = -15;\n\n// function scaleToFit(p: number, sourceMin: number, targetRange: number, scaleFactor: number) {\n//     return (p - sourceMin) * scaleFactor + targetRange / -0.5;\n// }\n\nfunction scaleToFit3(p: Vector3, midGraph: Vector3, depth: number, scaleFactor: number) {\n    return new Vector3(\n        (p.x - midGraph.x) * scaleFactor, //- targetRange.x / 2,\n        (p.y - midGraph.y) * scaleFactor, //- targetRange.y / 2,\n        (p.z - midGraph.z) * scaleFactor - (depth * scaleFactor) / 2 //- targetRange.z\n        // scaleToFit(p.x, minGraph.x, targetRange.x, scaleFactor),\n        // scaleToFit(p.y, minGraph.y, targetRange.y, scaleFactor),\n        // scaleToFit(p.z, minGraph.z, targetRange.z, scaleFactor)\n    );\n}\n\nexport function scalePoint(\n    p: Vector3,\n    graph: Layout,\n    viewportWidth: number,\n    viewportHeight: number,\n    scaleFactor: number\n) {\n    // const targetRange = new Vector3(\n    //     viewportWidth * scaleFactor,\n    //     viewportHeight * scaleFactor,\n    //     viewPortDepth * scaleFactor\n    // );\n    const midGraph = new Vector3(\n        (graph.width[1] + graph.width[0]) / 2,\n        (graph.height[1] + graph.height[0]) / 2,\n        (graph.depth[1] + graph.depth[0]) / 2\n    );\n    return scaleToFit3(p, midGraph, graph.depth[1] - graph.depth[0], scaleFactor);\n}\n\nexport function useScaleFactor(graph: Layout) {\n    const { viewport } = useThree();\n    const width = graph.width[1] - graph.width[0];\n    const height = graph.height[1] - graph.height[0];\n    const depth = graph.depth[1] - graph.depth[0];\n    return useMemo(() => {\n        const maxGraph = Math.max(width, height, depth);\n        const minScreen = Math.min(viewport.height, viewport.width);\n        return minScreen / maxGraph;\n    }, [width, height, depth, viewport.height, viewport.width]);\n}\n\nexport function useGraphViewPort(graph: Layout): Layout {\n    // const { viewport } = useThree();\n    const scaleFactor = useScaleFactor(graph);\n    // const viewPortRange = new Vector3(\n    //     viewport.width, //* scaleFactor,\n    //     viewport.height, //* scaleFactor,\n    //     viewPortDepth //* scaleFactor\n    // );\n    const midGraph = new Vector3(\n        (graph.width[1] + graph.width[0]) / 2,\n        (graph.height[1] + graph.height[0]) / 2,\n        (graph.depth[1] + graph.depth[0]) / 2\n    );\n    return useMemo<Layout>(() => {\n        const nodes = graph.nodes.map<PositionedNode>(node => ({\n            name: node.name,\n            position: scaleToFit3(node.position, midGraph, graph.depth[1] - graph.depth[0], scaleFactor),\n            width: node.width * scaleFactor, //, graph.width, viewport.width),\n            height: node.height * scaleFactor, //, graph.height, viewport.height),\n            depth: node.depth * scaleFactor //, graph.depth, viewPortDepth)\n        }));\n        const edges = graph.edges.map<PositionedEdge>(({ points, from, to }) => ({\n            from: from,\n            to: to,\n            points: points.map(p => scaleToFit3(p, midGraph, graph.depth[1] - graph.depth[0], scaleFactor))\n        }));\n        const width = (graph.width[1] - graph.width[0]) * scaleFactor; //, graph.width, viewport.width);\n        const height = (graph.height[1] - graph.height[0]) * scaleFactor; //, graph.height, viewport.height);\n        return {\n            width: [width * -0.5, width * 0.5],\n            height: [height * 0.5, height * 0.5],\n            nodes,\n            edges,\n            depth: [viewPortDepth, -1]\n        };\n    }, [scaleFactor, midGraph, graph]);\n}\n","import { groupBy } from \"lodash\";\nimport React, { FC, useCallback, useMemo, useState, useEffect } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { Vector3 } from \"three\";\nimport { MessageArrived, MessageProps } from \"../component/messages\";\nimport { Node, NodeEdgeType, NodeProps, NodeType } from \"../component/node\";\nimport { CameraRig } from \"../three-utils/camera-rig\";\nimport { Layout, useGraphViewPort, useScaleFactor, scalePoint } from \"./use-graph-viewport\";\n\n// extend({ OrbitControls })\n\n// function Controls() {\n// \tconst controls = useRef() as any //Ref<ReactThreeFiber.Object3DNode<OrbitControls,typeof OrbitControls>>\n// \tconst { camera, gl } = useThree()\n// \tuseFrame(() => controls && controls.current && controls.current.update())\n// \treturn (\n// \t\t<orbitControls ref={controls} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n// \t)\n// }\n\ninterface GraphProps {\n    graph: Layout;\n    feed: { to: string | null; messages: MessageProps[] }[];\n    onSelectNode: (args: { text: string }) => void;\n    selectedNode?: string | null;\n}\n\ntype FeedType = { [nodeName: string]: { count: number; messages: MessageArrived[] | undefined } | undefined };\nexport const Graph: FC<GraphProps> = ({ graph, onSelectNode, selectedNode, feed }) => {\n    const { clock, viewport } = useThree();\n    const [messageState, setMessageState] = useState<FeedType>({});\n    const scaleFactor = useScaleFactor(graph);\n    useEffect(\n        () =>\n            setMessageState((state: FeedType) =>\n                feed\n                    .filter(f => !!f.to)\n                    .reduce<FeedType>(\n                        (p, c) => ({\n                            ...p,\n                            [c.to!]: {\n                                messages: c.messages.map(\n                                    (message, i) =>\n                                        ({\n                                            ...message,\n                                            messageKey: `${message.messageKey}${i +\n                                                ((state[c.to!] && state[c.to!]?.count) || 0)}) `,\n                                            frame: clock.getElapsedTime() + (i / c.messages.length) * 5\n                                        } as MessageArrived)\n                                ),\n                                count: ((state[c.to!] && state[c.to!]?.count) || 0) + c.messages.length\n                            }\n                        }),\n                        state\n                    )\n            ),\n        [feed, setMessageState, clock]\n    );\n    const scaledGraph = useGraphViewPort(graph);\n\n    const onSelect = useCallback(\n        ({ name }: NodeType) => {\n            onSelectNode({ text: name });\n        },\n        [onSelectNode]\n    );\n    const onEgress = useCallback(\n        (fromNode: NodeType, toNode: NodeType, messages: MessageArrived[]) => {\n            setMessageState((state: FeedType) => ({\n                ...state,\n                [fromNode.name]: { ...(state[fromNode.name] || { count: 0 }), messages: undefined },\n                [toNode.name]: {\n                    ...(state[toNode.name] || { count: 0 }),\n                    messages: messages.map(m => ({ ...m, frame: clock.getElapsedTime() }))\n                }\n            }));\n        },\n        [clock]\n    );\n    const edgesPerNode = useMemo(() => groupBy(scaledGraph.edges, e => e.from), [scaledGraph]);\n    const nodes = useMemo(() => {\n        return scaledGraph.nodes.map<NodeProps>(node => {\n            const edges = (edgesPerNode[node.name] || []).map<NodeEdgeType>(edge => ({\n                points: edge.points,\n                duration: 5,\n                fromNode: { name: edge.from },\n                toNode: { name: edge.to },\n                onEgress\n            }));\n            return {\n                position: node.position,\n                name: node.name,\n                onEgress,\n                width: node.width,\n                height: node.height,\n                depth: node.depth,\n                onSelect: onSelect,\n                messages: (messageState[node.name] && messageState[node.name]?.messages) || undefined,\n                edges\n            };\n        });\n    }, [scaledGraph, onSelect, messageState, onEgress, edgesPerNode]);\n\n    const selectedNodeIndex = useMemo(() => {\n        const index = scaledGraph.nodes.findIndex(f => f.name === selectedNode);\n        if (index >= 0) return index;\n        return null;\n    }, [selectedNode, scaledGraph]);\n    return (\n        <>\n            <CameraRig\n                targetPosition={\n                    selectedNodeIndex === null\n                        ? scalePoint(\n                              new Vector3(\n                                  (graph.width[0] + graph.width[1]) / 2,\n                                  (graph.height[0] + graph.height[1]) / 2,\n                                  (graph.depth[0] + graph.depth[1]) / 2\n                              ),\n                              graph,\n                              viewport.width,\n                              viewport.height,\n                              scaleFactor\n                          )\n                        : new Vector3(\n                              nodes[selectedNodeIndex].position.x,\n                              nodes[selectedNodeIndex].position.y,\n                              nodes[selectedNodeIndex].position.z\n                          )\n                }\n                distance={selectedNode === null ? 8 : 4.5}\n            />\n            {nodes.map((node, i) => (\n                <Node key={node.name} {...node} />\n            ))}\n        </>\n    );\n};\n","import React, { useCallback, useState, useMemo, useEffect } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { Color } from \"three\";\nimport { useDag } from \"./graph/dagre-graph\";\nimport { Graph } from \"./graph/graph\";\nimport { useNgraph } from \"./graph/nlayout-graph\";\n\ninterface DemoGraphProps {\n    nodes: { name: string; width: number; height: number; depth: number; x?: number; y?: number; z?: number }[];\n    edges: { from: string; to: string; weight?: number }[];\n    pumpProducer: string | null;\n    pumpValue: string[] | null;\n}\n\nexport const DemoGraph = ({ pumpProducer, pumpValue, nodes, edges }: DemoGraphProps) => {\n    const [selectedNode, setNode] = useState<string | null>(null);\n    const graph = useNgraph(nodes, edges);\n    // const graph = useDag(nodes, edges, \"RL\");\n    const messages = useMemo(\n        () => (pumpValue && pumpProducer && pumpValue.map((v, i) => ({ messageKey: v }))) || null,\n        [pumpValue, pumpProducer]\n    );\n    const unselect = useCallback(\n        p => {\n            setNode(null);\n        },\n        [setNode]\n    );\n    return (\n        <Canvas pixelRatio={window.devicePixelRatio} onClickCapture={unselect}>\n            <ambientLight args={[0x0ffffff, 0.9]} />\n            <directionalLight position={[6, 2, 15]} args={[0x0ffaaaa, 0.7]} />\n            <directionalLight position={[-6, 2, 15]} args={[0x0aaffaa, 0.7]} />\n            <directionalLight position={[-6, 2, -25]} args={[0x0aaaaff, 0.7]} />\n            <directionalLight position={[6, 2, -25]} args={[0x0ffaaff, 0.7]} />\n            <Graph\n                graph={graph}\n                feed={[{ to: pumpProducer, messages: messages || [] }]}\n                selectedNode={selectedNode}\n                onSelectNode={({ text }) => setNode(text)}\n            />\n        </Canvas>\n    );\n};\n","import createGraph from \"ngraph.graph\";\nimport layout3d from \"ngraph.forcelayout3d\";\nimport { useMemo } from \"react\";\nimport { PositionedNode, PositionedEdge, Layout, MinMax } from \"./use-graph-viewport\";\nimport { Vector3 } from \"three\";\n\ninterface Node {\n    name: string;\n    x?: number;\n    y?: number;\n    z?: number;\n    width: number;\n    height: number;\n    depth: number;\n}\n\ninterface Edge {\n    from: string;\n    to: string;\n}\nconst ITERATIONS_COUNT = 100;\n\nexport function useNgraph(nodes: Node[], edges: Edge[]): Layout {\n    const positioned = useMemo(() => {\n        var graph = createGraph<Node, Edge>();\n        for (const n of nodes) {\n            graph.addNode(n.name, n);\n        }\n        for (const e of edges) graph.addLink(e.from, e.to, e);\n        const layout = layout3d(graph, { gravity: -30 });\n        for (const n of nodes) {\n            if (n.x !== undefined || n.y !== undefined || n.z !== undefined)\n                layout.setNodePosition(n.name, -10 * (n.x || 10), n.y || Math.random() * 500, n.z || 0);\n        }\n\n        for (let i = 0; i < ITERATIONS_COUNT; ++i) {\n            layout.step();\n        }\n        const retnodes: PositionedNode[] = nodes.map(n => {\n            const { x, y, z } = layout.getNodePosition(n.name);\n            return {\n                name: n.name,\n                width: n.width,\n                height: n.height,\n                depth: n.depth,\n                position: new Vector3(x, y, z)\n            };\n        });\n        const retEdges: PositionedEdge[] = edges.map(e => {\n            const fromPos = layout.getNodePosition(e.from);\n            const toPos = layout.getNodePosition(e.to);\n            const fromNode = graph.getNode(e.from)?.data!;\n            const toNode = graph.getNode(e.to)?.data!;\n\n            const mid = (from: number, to: number, delta: number) => (to - from) * delta + from;\n\n            const connectPoint = (pos: Vector3, output: boolean) => {\n                if (!output) return new Vector3(pos.x - toNode.width / 2, pos.y, pos.z);\n                else return new Vector3(pos.x + fromNode.width / 2, pos.y, pos.z);\n            };\n\n            const midp = new Vector3(\n                mid(fromPos.x, toPos.x, 0.5),\n                mid(fromPos.y, toPos.y, 0.5),\n                mid(fromPos.z, toPos.z, 0.5)\n            );\n            const fromPoint = connectPoint(new Vector3(fromPos.x, fromPos.y, fromPos.z), true);\n            const toPoint = connectPoint(new Vector3(toPos.x, toPos.y, toPos.z), false);\n            const fromHose = new Vector3(\n                fromPoint.x + fromNode.width / 2,\n                mid(fromPoint.y, toPoint.y, 0.1),\n                mid(fromPoint.z, toPoint.z, 0.1)\n            );\n            const toHose = new Vector3(\n                toPoint.x - toNode.width / 2,\n                mid(fromPoint.y, toPoint.y, 0.9),\n                mid(fromPoint.z, toPoint.z, 0.9)\n            );\n            return {\n                from: e.from,\n                to: e.to,\n                points: [fromPoint, fromHose, midp, toHose, toPoint]\n            };\n        });\n        const { x1, x2, y1, y2, z1, z2 } = layout.getGraphRect();\n        return {\n            nodes: retnodes,\n            edges: retEdges,\n            width: [x1, x2] as MinMax,\n            height: [y1, y2] as MinMax,\n            depth: [z1, z2] as MinMax\n        };\n    }, [nodes, edges]);\n    return positioned;\n}\n","import React, { useState, FC, useRef, useCallback } from \"react\";\n\ninterface RecordProps {\n    filename: string;\n}\n\ndeclare global {\n    export interface MediaDevices {\n        getDisplayMedia(x: MediaStreamConstraints): Promise<MediaStream>;\n    }\n}\n\nexport const RecordStream: FC<RecordProps> = ({ filename }) => {\n    const [downloadUrl, setDownloadUrl] = useState<string | null>(null);\n    const [recorder, setRecorder] = useState<MediaRecorder | null>(null);\n    const videoRef = useRef<HTMLVideoElement | null>(null);\n    const onsStart = useCallback(() => {\n        async function doit() {\n            const recData: Blob[] = [];\n            const stream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });\n            videoRef.current!.srcObject = stream;\n            const currRec = new MediaRecorder(stream, { mimeType: 'video/webm;codecs=\"vp8,opus\"' });\n            currRec.ondataavailable = e => recData.push(e.data);\n            currRec.onstop = () => {\n                const blob = new Blob(recData, { type: recData[0].type });\n                setDownloadUrl(URL.createObjectURL(blob));\n            };\n            currRec.start();\n            setRecorder(currRec);\n            return null;\n        }\n        if (videoRef.current) doit();\n    }, [videoRef]);\n    const onStop = useCallback(() => recorder && recorder.stop(), [recorder]);\n    return (\n        <div style={{ padding: 2, backgroundColor: \"#303030\", width: 120 }}>\n            <video style={{ display: \"hidden\", width: 1, height: 1 }} ref={videoRef} />\n            {downloadUrl ? (\n                <a href={downloadUrl} download={filename + \".webm\"}>\n                    Click to Download\n                </a>\n            ) : !recorder ? (\n                <button onClick={onsStart}>Start Recording</button>\n            ) : (\n                <button onClick={onStop}>Stop Recording</button>\n            )}\n        </div>\n    );\n};\n","import React, { useState, useCallback, CSSProperties } from \"react\";\nimport \"./App.css\";\nimport { DemoGraph } from \"./demo-graph\";\nimport { RecordStream } from \"./component/record-stream\";\n\nconst height = 20;\nconst width = 20;\nconst depth = 20;\n\nconst producer1 = \"Producer #1\";\nconst producer2 = \"Producer #2\";\nconst producer3 = \"Producer #3\";\nconst messageQueue = \"Message Queue\";\nconst consumer1 = \"Consumer #1\";\nconst consumer2 = \"Consumer #2\";\nconst consumer3 = \"Consumer #3\";\nconst consumer4 = \"Consumer #4\";\nconst messageQueue2 = \"Out Queue\";\n// const client = \"Client\";\n\nconst commonNode = { width, height, depth };\nconst nodes = [\n    { name: producer1, ...commonNode, x: 100 },\n    { name: producer2, ...commonNode, x: 100 },\n    { name: producer3, ...commonNode, x: 100 },\n    { name: messageQueue, ...commonNode },\n    { name: consumer1, ...commonNode, x: -100 },\n    { name: consumer2, ...commonNode, x: -100 },\n    { name: consumer3, ...commonNode, x: -100 },\n    { name: consumer4, ...commonNode, x: -100 },\n    { name: messageQueue2, ...commonNode, y: -300 }\n];\n\nconst edges = [\n    { from: producer1, to: messageQueue, weight: 2 },\n    { from: producer2, to: messageQueue, weight: 2 },\n    { from: producer3, to: messageQueue, weight: 2 },\n    { from: messageQueue, to: consumer1, weight: 2 },\n    { from: messageQueue, to: consumer2, weight: 2 },\n    { from: messageQueue, to: consumer3, weight: 2 },\n    { from: messageQueue, to: consumer4, weight: 2 },\n    { from: consumer3, to: messageQueue2, weight: 2 }\n];\nconst buttonStyle = {\n    backgroundColor: \"black\",\n    color: \"#bbb\",\n    height: 25,\n    fontWeight: \"bold\",\n    margin: 5\n} as CSSProperties;\n\nconst App: React.FC = () => {\n    const [pump, setPump] = useState<{ id: string; v: string[] } | null>(null);\n    const pump1 = useCallback(() => setPump({ id: producer1, v: [\"1X\"] }), [setPump]);\n    const pump2 = useCallback(() => setPump({ id: producer2, v: [\"2X\"] }), [setPump]);\n    const pump3 = useCallback(() => setPump({ id: producer3, v: [\"3X\"] }), [setPump]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div>DAG 3D Component</div>\n                <button style={buttonStyle} onClick={pump1}>\n                    Pump Producer #1\n                </button>\n                <button style={buttonStyle} onClick={pump2}>\n                    Pump Producer #2\n                </button>\n                <button style={buttonStyle} onClick={pump3}>\n                    Pump Producer #3\n                </button>\n                <div>\n                    <RecordStream filename=\"dag3d\" />\n                </div>\n            </header>\n            <DemoGraph\n                pumpProducer={(pump && pump.id) || null}\n                pumpValue={pump && pump.v}\n                nodes={nodes}\n                edges={edges}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}