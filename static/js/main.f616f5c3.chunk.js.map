{"version":3,"sources":["text.tsx","camera-rig.tsx","graph.tsx","demo-graph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Text","forwardRef","ref","width","height","text","backgroundColor","color","depth","props","_width","_height","_text","textCanvas","useMemo","canvas","document","createElement","context","getContext","textureWidth","textureHeight","style","position","top","scale","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","x","y","fillText","useThree","viewport","args","attach","attachArray","image","CameraRig","pos","points","camera","useState","z","vel","camPos","setCamPos","camLooKAt","setCamLookAt","cb","useCallback","time","clock","getElapsedTime","index","Math","floor","length","next","useFrame","set","lookAt","Vector3","useCameraPan","useDag","nodes","edges","direction","g","graphlib","Graph","directed","setGraph","rankdir","edgesep","marginx","marginy","setDefaultEdgeLabel","node","setNode","name","label","edge","setEdge","from","to","minlen","layout","retnodes","map","n","reduce","p","c","min","max","e","graph","convertGraphX","size","convertGraphY","selectedNode","setIndex","useSelectedNode","console","log","i","key","path","CatmullRomCurve3","point","DemoGraph","pixelRatio","window","devicePixelRatio","Color","rotation","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f616f5c3.chunk.js","sourcesContent":["import React, { forwardRef, Ref, useMemo } from 'react';\nimport { ReactThreeFiber, useThree } from 'react-three-fiber';\nimport { Mesh } from 'three';\n\nexport type MeshProps = ReactThreeFiber.Object3DNode<Mesh, typeof Mesh>;\n\nexport interface TextProps {\n    width?: number;\n    height?: number;\n    text?: string;\n    depth?: number;\n    backgroundColor?: string;\n    color?: string;\n    position: number[];\n}\n\n\nexport const Text = forwardRef(({ width, height, text, backgroundColor, color, depth, ...props }: TextProps, ref: Ref<MeshProps>) => {\n    const _width = width || 1\n    const _height = height || 0.3\n    const _text = text || '<null>'\n    const textCanvas = useMemo(() => {\n        const canvas = document.createElement('canvas')\n        const context = canvas.getContext('2d')\n        if (!context) return null;\n        const textureWidth = _width * 20;\n        const textureHeight = _height * 20;\n        canvas.style.position = 'absolute'\n        canvas.style.top = `calc(50% - ${textureHeight / 2}px)`\n        canvas.style.width = textureWidth + 'px'\n        canvas.style.height = textureHeight + 'px'\n        canvas.width = textureWidth * 20\n        canvas.height = textureHeight * 20\n        context.scale(20, 20)\n        context.fillStyle = backgroundColor || 'grey'\n        context.fillRect(0, 0, textureWidth, textureHeight)\n        const fontSize = textureHeight / 1.5;\n        context.font = `bold ${fontSize}px Arial, sans-serif`\n        context.fillStyle = color || 'white'\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        const x = textureWidth / 2\n        const y = textureHeight / 2\n        context.fillText(_text, x, y)\n        return canvas\n    }, [width, height, color, backgroundColor, text])\n\n    const { viewport } = useThree()\n    return (\n        <mesh ref={ref} {...props}>\n            <boxBufferGeometry args={[_width, _height, depth || 0.06]} attach=\"geometry\" />\n            <meshStandardMaterial attachArray=\"material\" color=\"grey\" />\n            <meshStandardMaterial attachArray=\"material\" color=\"grey\" />\n            <meshStandardMaterial attachArray=\"material\" color=\"grey\" />\n            <meshStandardMaterial attachArray=\"material\" color=\"grey\" />\n\n            <meshStandardMaterial attachArray=\"material\">\n                <canvasTexture attach=\"map\" image={textCanvas} />\n            </meshStandardMaterial>\n            <meshStandardMaterial attachArray=\"material\">\n                <canvasTexture attach=\"map\" image={textCanvas} />\n            </meshStandardMaterial>\n        </mesh>\n    )\n})\n\n","import React, { useCallback, useState } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\nimport { Vector3 } from \"three\"\n\n\nexport function useCameraPan(points: Vector3[]) {\n    const { camera } = useThree();\n    const [camPos, setCamPos] = useState({ pos: { x: 0, y: 0, z: 4 }, vel: { x: 0, y: 0, z: 0 } })\n    const [camLooKAt, setCamLookAt] = useState([0, 0, -1])\n    const cb = useCallback(({ clock }: any) => {\n        const time = clock.getElapsedTime() / 2\n        const index = Math.floor(time) % points.length;\n        const next = (index + 1) % points.length;\n        const secFraction = time - Math.floor(time);\n\n        setCamPos(pos => ({\n            vel: {\n                x: ((points[index].x - pos.pos.x) * 0.002 + pos.vel.x) * 0.95,\n                y: ((points[index].y - pos.pos.y) * 0.002 + pos.vel.y) * 0.95,\n                z: 0//Math.sin(secFraction * 2 * Math.PI) / 500\n            },\n            pos: {\n                x: pos.pos.x + pos.vel.x,\n                y: pos.pos.y + pos.vel.y,\n                z: pos.pos.z + pos.vel.z\n            }\n        }));\n        setCamLookAt(pos => [(points[next].x - pos[0]) * 0.002 + pos[0], (points[next].y - pos[1]) * 0.002 + pos[1], pos[2]])\n    }, [points])\n    useFrame(cb);\n    camera.position.set(camPos.pos.x, camPos.pos.y, camPos.pos.z)\n    camera.lookAt(new Vector3(camPos.pos.x + camPos.vel.x * 3, camPos.pos.y + camPos.vel.y * 3, camLooKAt[2]))\n    return [camPos.pos.x, camPos.pos.y, camPos.pos.z];\n}\n\nexport const CameraRig = ({ points }: { points: Vector3[] }) => {\n    const pos = useCameraPan(points);\n    return <camera attach=\"camera\" position={pos} />\n}\n","import { graphlib, layout } from \"dagre\"\nimport React, { FC, useMemo, useRef, Ref, useState, useCallback } from 'react'\nimport { Canvas, useThree, extend, ReactThreeFiber, useFrame } from 'react-three-fiber'\nimport { Text } from \"./text\"\nimport { SpinText } from \"./spin-text\"\nimport { Vector3, Mesh, CurvePath, Curve, CatmullRomCurve3, Color, Colors, Vector } from \"three\"\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nimport { CameraRig, useCameraPan } from \"./camera-rig\"\n\ninterface Node {\n\tname: string;\n\twidth: number;\n\theight: number;\n}\n\ninterface Edge {\n\tfrom: string;\n\tto: string;\n}\n\n\n\ninterface PositionedNode {\n\tname: string;\n\twidth: number;\n\theight: number;\n\tx: number;\n\ty: number;\n}\n\ninterface PositionedEdge {\n\tname?: string;\n\tpoints: { x: number, y: number }[]\n}\n\n\ninterface Layout {\n\tnodes: PositionedNode[];\n\tedges: PositionedEdge[];\n\twidth: [number, number];\n\theight: [number, number];\n}\n\nexport function useDag(nodes: Node[], edges: Edge[], direction = \"LR\"): Layout {\n\treturn useMemo(() => {\n\t\tconst g = new graphlib.Graph({ directed: true });\n\t\tg.setGraph({ rankdir: direction, edgesep: 2, marginx: 20, marginy: 20 });\n\t\tg.setDefaultEdgeLabel(() => { return {} });\n\t\tfor (const node of nodes) {\n\t\t\tg.setNode(node.name, { label: node.name, width: node.width, height: node.height });\n\t\t}\n\n\t\tfor (const edge of edges) {\n\t\t\t// Add edges to the graph.\n\t\t\tg.setEdge(edge.from, edge.to, { minlen: 1 });\n\t\t}\n\t\tlayout(g);\n\t\tconst retnodes = g.nodes().map(n => ({ name: n, width: g.node(n).width, height: g.node(n).height, x: g.node(n).x, y: g.node(n).y }));\n\t\tconst width = retnodes.reduce((p, c) => [Math.min(c.x, p[0]), Math.max(c.x + c.width, p[1])], [0, 0]) as [number, number]\n\t\tconst height = retnodes.reduce((p, c) => [Math.min(c.y, p[0]), Math.max(c.y + c.height, p[1])], [0, 0]) as [number, number]\n\t\tconst retedges = g.edges().map(e => ({ points: g.edge(e).points }));\n\t\treturn { nodes: retnodes, width, height, edges: retedges }\n\t}, [nodes, edges])\n}\n\n// extend({ OrbitControls })\n\n// function Controls() {\n// \tconst controls = useRef() as any //Ref<ReactThreeFiber.Object3DNode<OrbitControls,typeof OrbitControls>>\n// \tconst { camera, gl } = useThree()\n// \tuseFrame(() => controls && controls.current && controls.current.update())\n// \treturn (\n// \t\t<orbitControls ref={controls} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n// \t)\n// }\n\nfunction useSelectedNode(points: any[]) {\n\tconst [index, setIndex] = useState(0);\n\tconst cb = useCallback(({ clock }: any) => {\n\t\tconst time = clock.getElapsedTime() / 2\n\t\tconst index = Math.floor(time) % points.length;\n\t\tsetIndex(index);\n\t}, [points])\n\tuseFrame(cb);\n\treturn index;\n}\n\n\n\n\n\ninterface GraphProps {\n\tgraph: Layout;\n}\nexport const Graph: FC<GraphProps> = ({ graph }) => {\n\tconst { viewport, size } = useThree();\n\tconst convertGraphX = (x: number) => (x - graph.width[0]) * (viewport.width) / (graph.width[1] - graph.width[0]) - viewport.width / 2\n\tconst convertGraphY = (y: number) => (y - graph.height[0]) * (viewport.height) / (graph.height[1] - graph.height[0]) - viewport.height / 2\n\tconst convertWidth = (width: number) => width * viewport.width / (graph.width[1] - graph.width[0])\n\tconst convertHeight = (height: number) => height * viewport.height / (graph.height[1] - graph.height[0])\n\tconst selectedNode = useSelectedNode(graph.nodes)\n\tconst points = useMemo(() => {\n\t\treturn graph.nodes.map(n => new Vector3(convertGraphX(n.x), convertGraphY(n.y), -0.1))\n\t}, [graph])\n\tconsole.log({ selectedNode })\n\treturn <>\n\t\t<CameraRig points={points} />\n\t\t{\n\t\t\tgraph.nodes.map((n, i) => (<Text\n\t\t\t\tkey={n.name + selectedNode}\n\t\t\t\ttext={n.name}\n\t\t\t\tcolor={i === selectedNode ? \"black\" : \"white\"}\n\t\t\t\twidth={convertWidth(n.width)}\n\t\t\t\theight={convertHeight(n.height)}\n\t\t\t\tdepth={0.2}\n\t\t\t\tposition={[convertGraphX(n.x), convertGraphY(n.y), -0.1]} />))\n\t\t}\n\t\t{graph.edges.map(edge => {\n\t\t\tconst path = new CatmullRomCurve3(edge.points.map(point => new Vector3(convertGraphX(point.x), convertGraphY(point.y), -0.1)), false, \"catmullrom\")\n\t\t\treturn (<mesh >\n\t\t\t\t<tubeGeometry\n\t\t\t\t\tattach=\"geometry\"\n\t\t\t\t\targs={[path, 30, 0.03, 8, false]}\n\t\t\t\t/>\n\t\t\t\t<meshPhongMaterial attach=\"material\" color=\"grey\" />\n\t\t\t</mesh>);\n\t\t})}\n\t</>\n\n}\n\n\nexport default function App() {\n\tconst height = 6;\n\tconst width = 50;\n\tconst vwapEngine = \"VWAP Engine\"\n\tconst oms = \"OMS\"\n\tconst market = \"Exch Links\"\n\tconst trading = \"Trading Sys\"\n\tconst prices = \"MD Sys\"\n\tconst client = \"Client\"\n\tconst clientSys = \"Client Int\"\n\tconst graph = useDag([\n\t\t{ name: \"Config\", width, height },\n\t\t{ name: \"Ref Data Svc\", width, height },\n\t\t{ name: \"EOD Prices\", width, height },\n\t\t{ name: prices, width, height },\n\t\t{ name: client, width, height },\n\t\t{ name: clientSys, width, height },\n\t\t{ name: vwapEngine, width, height },\n\t\t{ name: oms, width, height },\n\t\t{ name: market, width, height },\n\t\t{ name: trading, width, height }\n\t], [\n\t\t{ from: \"Config\", to: vwapEngine },\n\t\t{ from: client, to: clientSys },\n\t\t{ from: clientSys, to: oms },\n\t\t{ from: \"Ref Data Svc\", to: vwapEngine },\n\t\t{ from: prices, to: vwapEngine },\n\t\t{ from: \"EOD Prices\", to: vwapEngine },\n\t\t{ from: vwapEngine, to: oms },\n\t\t{ from: oms, to: market },\n\t\t{ from: market, to: trading },\n\t\t{ from: trading, to: clientSys }\n\t],\n\t\t\"RL\");\n\treturn (\n\t\t<Canvas pixelRatio={window.devicePixelRatio}>\n\n\t\t\t<ambientLight />\n\t\t\t{/* <pointLight position={[3, 30, 10]} /> */}\n\t\t\t<spotLight position={[10, -30, 10]} color={new Color(\"#4040ff\")} rotation={[0.2, -0.2, 0]} />\n\t\t\t<spotLight position={[-10, -30, 10]} color={new Color(\"#90ff90\")} rotation={[0.2, 0.2, 0]} />\n\t\t\t<Graph graph={graph} />\n\t\t</Canvas>\n\t)\n}\n","import { graphlib, layout } from \"dagre\"\nimport React, { FC, useMemo, useRef, Ref, useState, useCallback } from 'react'\nimport { Canvas, useThree, extend, ReactThreeFiber, useFrame } from 'react-three-fiber'\nimport { Text } from \"./text\"\nimport { SpinText } from \"./spin-text\"\nimport { Vector3, Mesh, CurvePath, Curve, CatmullRomCurve3, Color, Colors, Vector } from \"three\"\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { Graph, useDag } from \"./graph\"\n\nexport const DemoGraph = () => {\n    const height = 6;\n    const width = 50;\n    const vwapEngine = \"VWAP Engine\"\n    const oms = \"OMS\"\n    const market = \"Exch Links\"\n    const trading = \"Trading Sys\"\n    const prices = \"MD Sys\"\n    const client = \"Client\"\n    const clientSys = \"Client Int\"\n    const graph = useDag([\n        { name: \"Config\", width, height },\n        { name: \"Ref Data Svc\", width, height },\n        { name: \"EOD Prices\", width, height },\n        { name: prices, width, height },\n        { name: client, width, height },\n        { name: clientSys, width, height },\n        { name: vwapEngine, width, height },\n        { name: oms, width, height },\n        { name: market, width, height },\n        { name: trading, width, height }\n    ], [\n        { from: \"Config\", to: vwapEngine },\n        { from: client, to: clientSys },\n        { from: clientSys, to: oms },\n        { from: \"Ref Data Svc\", to: vwapEngine },\n        { from: prices, to: vwapEngine },\n        { from: \"EOD Prices\", to: vwapEngine },\n        { from: vwapEngine, to: oms },\n        { from: oms, to: market },\n        { from: market, to: trading },\n        { from: trading, to: clientSys }\n    ],\n        \"RL\");\n    return (\n        <Canvas pixelRatio={window.devicePixelRatio}>\n            <ambientLight />\n            {/* <pointLight position={[3, 30, 10]} /> */}\n            <spotLight position={[10, -30, 10]} color={new Color(\"#4040ff\")} rotation={[0.2, -0.2, 0]} />\n            <spotLight position={[-10, -30, 10]} color={new Color(\"#90ff90\")} rotation={[0.2, 0.2, 0]} />\n            <Graph graph={graph} />\n        </Canvas>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport { DemoGraph } from \"./demo-graph\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        DAG Component\n      </header>\n      <DemoGraph />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}